#line 2 "mdl/MDLScanner.inl"

#line 4 "mdl/MDLScanner.inl"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void *yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mdl_llrestart(yyin, yyscanner)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE mdl_lllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
#define YY_LESS_LINENO(n)                  \
	do                                     \
	{                                      \
		yy_size_t yyl;                     \
		for (yyl = n; yyl < yyleng; ++yyl) \
			if (yytext[yyl] == '\n')       \
				--yylineno;                \
	} while (0)
#define YY_LINENO_REWIND_TO(dst)             \
	do                                       \
	{                                        \
		const char *p;                       \
		for (p = yy_cp - 1; p >= (dst); --p) \
			if (*p == '\n')                  \
				--yylineno;                  \
	} while (0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                         \
	do                                                                    \
	{                                                                     \
		/* Undo effects of setting up yytext. */                          \
		yy_size_t yyless_macro_arg = (n);                                 \
		YY_LESS_LINENO(yyless_macro_arg);                                 \
		*yy_cp = yyg->yy_hold_char;                                       \
		YY_RESTORE_YY_MORE_OFFSET                                         \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */                    \
	} while (0)

#define unput(c) yyunput(c, yyg->yytext_ptr, yyscanner)

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
	FILE *yy_input_file;

	char *yy_ch_buf;  /* input buffer */
	char *yy_buf_pos; /* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	int yy_bs_lineno; /**< The line count. */
	int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mdl_llrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER (yyg->yy_buffer_stack                                 \
							   ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
							   : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void mdl_llrestart(FILE *input_file, yyscan_t yyscanner);
void mdl_ll_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
YY_BUFFER_STATE mdl_ll_create_buffer(FILE *file, int size, yyscan_t yyscanner);
void mdl_ll_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void mdl_ll_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void mdl_llpush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
void mdl_llpop_buffer_state(yyscan_t yyscanner);

static void mdl_llensure_buffer_stack(yyscan_t yyscanner);
static void mdl_ll_load_buffer_state(yyscan_t yyscanner);
static void mdl_ll_init_buffer(YY_BUFFER_STATE b, FILE *file, yyscan_t yyscanner);

#define YY_FLUSH_BUFFER mdl_ll_flush_buffer(YY_CURRENT_BUFFER, yyscanner)

YY_BUFFER_STATE mdl_ll_scan_buffer(char *base, yy_size_t size, yyscan_t yyscanner);
YY_BUFFER_STATE mdl_ll_scan_string(yyconst char *yy_str, yyscan_t yyscanner);
YY_BUFFER_STATE mdl_ll_scan_bytes(yyconst char *bytes, int len, yyscan_t yyscanner);

void *mdl_llalloc(yy_size_t, yyscan_t yyscanner);
void *mdl_llrealloc(void *, yy_size_t, yyscan_t yyscanner);
void mdl_llfree(void *, yyscan_t yyscanner);

#define yy_new_buffer mdl_ll_create_buffer

#define yy_set_interactive(is_interactive)                            \
	{                                                                 \
		if (!YY_CURRENT_BUFFER)                                       \
		{                                                             \
			mdl_llensure_buffer_stack(yyscanner);                     \
			YY_CURRENT_BUFFER_LVALUE =                                \
				mdl_ll_create_buffer(yyin, YY_BUF_SIZE, yyscanner);   \
		}                                                             \
		YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol)                                          \
	{                                                               \
		if (!YY_CURRENT_BUFFER)                                     \
		{                                                           \
			mdl_llensure_buffer_stack(yyscanner);                   \
			YY_CURRENT_BUFFER_LVALUE =                              \
				mdl_ll_create_buffer(yyin, YY_BUF_SIZE, yyscanner); \
		}                                                           \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;               \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef char YY_CHAR;

typedef yyconst struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state(yyscan_t yyscanner);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state, yyscan_t yyscanner);
static int yy_get_next_buffer(yyscan_t yyscanner);
static void yynoreturn yy_fatal_error(yyconst char *msg, yyscan_t yyscanner);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION        \
	yyg->yytext_ptr = yy_bp;       \
	yyleng = (int)(yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp;    \
	*yy_cp = '\0';                 \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 13
#define YY_END_OF_BUFFER 14
struct yy_trans_info
{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
};
static yyconst struct yy_trans_info yy_transition[2455] =
	{
		{0, 0},
		{0, 2327},
		{0, 0},
		{0, 2325},
		{1, 260},
		{2, 260},
		{3, 260},
		{4, 260},
		{5, 260},
		{6, 260},
		{7, 260},
		{8, 260},
		{9, 262},
		{10, 264},
		{11, 260},
		{12, 260},
		{13, 260},
		{14, 260},
		{15, 260},
		{16, 260},
		{17, 260},
		{18, 260},
		{19, 260},
		{20, 260},
		{21, 260},
		{22, 260},
		{23, 260},
		{24, 260},
		{25, 260},
		{26, 260},
		{27, 260},
		{28, 260},
		{29, 260},
		{30, 260},
		{31, 260},
		{32, 266},
		{33, 260},
		{34, 260},
		{35, 260},
		{36, 260},
		{37, 260},
		{38, 260},
		{39, 260},
		{40, 260},
		{41, 260},
		{42, 260},
		{43, 260},
		{44, 260},
		{45, 260},
		{46, 268},

		{47, 284},
		{48, 286},
		{49, 298},
		{50, 298},
		{51, 298},
		{52, 298},
		{53, 298},
		{54, 298},
		{55, 298},
		{56, 298},
		{57, 298},
		{58, 260},
		{59, 288},
		{60, 260},
		{61, 260},
		{62, 260},
		{63, 260},
		{64, 260},
		{65, 310},
		{66, 310},
		{67, 310},
		{68, 310},
		{69, 310},
		{70, 310},
		{71, 310},
		{72, 310},
		{73, 310},
		{74, 310},
		{75, 310},
		{76, 310},
		{77, 310},
		{78, 310},
		{79, 310},
		{80, 310},
		{81, 310},
		{82, 310},
		{83, 310},
		{84, 310},
		{85, 310},
		{86, 310},
		{87, 310},
		{88, 310},
		{89, 310},
		{90, 310},
		{91, 260},
		{92, 260},
		{93, 260},
		{94, 260},
		{95, 260},
		{96, 260},

		{97, 310},
		{98, 310},
		{99, 310},
		{100, 310},
		{101, 310},
		{102, 310},
		{103, 310},
		{104, 310},
		{105, 310},
		{106, 310},
		{107, 310},
		{108, 310},
		{109, 310},
		{110, 310},
		{111, 310},
		{112, 310},
		{113, 310},
		{114, 310},
		{115, 310},
		{116, 310},
		{117, 310},
		{118, 310},
		{119, 310},
		{120, 310},
		{121, 310},
		{122, 310},
		{123, 260},
		{124, 260},
		{125, 260},
		{126, 260},
		{127, 260},
		{128, 260},
		{0, 0},
		{0, 2195},
		{1, 130},
		{2, 130},
		{3, 130},
		{4, 130},
		{5, 130},
		{6, 130},
		{7, 130},
		{8, 130},
		{9, 132},
		{10, 134},
		{11, 130},
		{12, 130},
		{13, 130},
		{14, 130},
		{15, 130},
		{16, 130},

		{17, 130},
		{18, 130},
		{19, 130},
		{20, 130},
		{21, 130},
		{22, 130},
		{23, 130},
		{24, 130},
		{25, 130},
		{26, 130},
		{27, 130},
		{28, 130},
		{29, 130},
		{30, 130},
		{31, 130},
		{32, 136},
		{33, 130},
		{34, 130},
		{35, 130},
		{36, 130},
		{37, 130},
		{38, 130},
		{39, 130},
		{40, 130},
		{41, 130},
		{42, 130},
		{43, 130},
		{44, 130},
		{45, 130},
		{46, 138},
		{47, 154},
		{48, 156},
		{49, 168},
		{50, 168},
		{51, 168},
		{52, 168},
		{53, 168},
		{54, 168},
		{55, 168},
		{56, 168},
		{57, 168},
		{58, 130},
		{59, 158},
		{60, 130},
		{61, 130},
		{62, 130},
		{63, 130},
		{64, 130},
		{65, 180},
		{66, 180},

		{67, 180},
		{68, 180},
		{69, 180},
		{70, 180},
		{71, 180},
		{72, 180},
		{73, 180},
		{74, 180},
		{75, 180},
		{76, 180},
		{77, 180},
		{78, 180},
		{79, 180},
		{80, 180},
		{81, 180},
		{82, 180},
		{83, 180},
		{84, 180},
		{85, 180},
		{86, 180},
		{87, 180},
		{88, 180},
		{89, 180},
		{90, 180},
		{91, 130},
		{92, 130},
		{93, 130},
		{94, 130},
		{95, 130},
		{96, 130},
		{97, 180},
		{98, 180},
		{99, 180},
		{100, 180},
		{101, 180},
		{102, 180},
		{103, 180},
		{104, 180},
		{105, 180},
		{106, 180},
		{107, 180},
		{108, 180},
		{109, 180},
		{110, 180},
		{111, 180},
		{112, 180},
		{113, 180},
		{114, 180},
		{115, 180},
		{116, 180},

		{117, 180},
		{118, 180},
		{119, 180},
		{120, 180},
		{121, 180},
		{122, 180},
		{123, 130},
		{124, 130},
		{125, 130},
		{126, 130},
		{127, 130},
		{128, 130},
		{0, 12},
		{0, 2065},
		{0, 4},
		{0, 2063},
		{0, 13},
		{0, 2061},
		{0, 4},
		{0, 2059},
		{0, 12},
		{0, 2057},
		{0, 0},
		{0, 0},
		{9, 34},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 12},
		{0, 2041},
		{0, 9},
		{0, 2039},
		{0, 5},
		{0, 2037},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{32, 34},
		{0, 4},
		{0, 2029},

		{0, 7},
		{0, 2027},
		{0, 11},
		{0, 2025},
		{0, 10},
		{0, 2023},
		{0, 2},
		{0, 2021},
		{9, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 6},
		{0, 2015},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 134},
		{49, 134},
		{50, 134},
		{51, 134},
		{52, 134},
		{53, 134},
		{54, 134},
		{55, 134},
		{56, 134},
		{57, 134},
		{42, 222},
		{0, 0},
		{32, 0},
		{0, 0},
		{0, 0},
		{47, 352},
		{46, 480},
		{0, 0},
		{48, 503},
		{49, 503},
		{50, 503},
		{51, 503},
		{52, 503},
		{53, 503},
		{54, 503},
		{55, 503},
		{56, 515},
		{57, 515},
		{46, 468},
		{0, 0},
		{48, 562},

		{49, 562},
		{50, 562},
		{51, 562},
		{52, 562},
		{53, 562},
		{54, 562},
		{55, 562},
		{56, 562},
		{57, 562},
		{0, 0},
		{0, 0},
		{48, 574},
		{49, 574},
		{50, 574},
		{51, 574},
		{52, 574},
		{53, 574},
		{54, 574},
		{55, 574},
		{56, 574},
		{57, 574},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{88, 539},
		{65, 574},
		{66, 574},
		{67, 574},
		{68, 574},
		{69, 574},
		{70, 574},
		{71, 574},
		{72, 574},
		{73, 574},
		{74, 574},
		{75, 574},
		{76, 574},
		{77, 574},
		{78, 574},
		{79, 574},
		{80, 574},
		{81, 574},
		{82, 574},
		{83, 574},
		{84, 574},
		{85, 574},
		{86, 574},

		{87, 574},
		{88, 574},
		{89, 574},
		{90, 574},
		{0, 10},
		{0, 1923},
		{0, 0},
		{0, 0},
		{95, 574},
		{120, 539},
		{97, 574},
		{98, 574},
		{99, 574},
		{100, 574},
		{101, 574},
		{102, 574},
		{103, 574},
		{104, 574},
		{105, 574},
		{106, 574},
		{107, 574},
		{108, 574},
		{109, 574},
		{110, 574},
		{111, 574},
		{112, 574},
		{113, 574},
		{114, 574},
		{115, 574},
		{116, 574},
		{117, 574},
		{118, 574},
		{119, 574},
		{120, 574},
		{121, 574},
		{122, 574},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 0},
		{48, 574},
		{49, 574},
		{50, 574},
		{51, 574},
		{52, 574},
		{53, 574},
		{54, 574},
		{55, 574},
		{56, 574},
		{57, 574},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{68, -102},
		{69, 606},
		{70, -100},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{100, -102},
		{101, 606},
		{102, -100},
		{0, 3},
		{0, 1819},
		{1, 574},
		{2, 574},
		{3, 574},
		{4, 574},
		{5, 574},
		{6, 574},
		{7, 574},
		{8, 574},
		{9, 574},
		{10, 574},
		{11, 574},
		{12, 574},
		{13, 574},
		{14, 574},
		{15, 574},
		{16, 574},
		{17, 574},
		{18, 574},
		{19, 574},
		{20, 574},
		{21, 574},
		{22, 574},
		{23, 574},
		{24, 574},
		{25, 574},
		{26, 574},
		{27, 574},
		{28, 574},
		{29, 574},
		{30, 574},
		{31, 574},
		{32, 574},
		{33, 574},
		{34, 574},
		{35, 574},
		{36, 574},
		{37, 574},
		{38, 574},
		{39, 574},
		{40, 574},

		{41, 574},
		{42, 704},
		{43, 574},
		{44, 574},
		{45, 574},
		{46, 574},
		{47, 574},
		{48, 574},
		{49, 574},
		{50, 574},
		{51, 574},
		{52, 574},
		{53, 574},
		{54, 574},
		{55, 574},
		{56, 574},
		{57, 574},
		{58, 574},
		{59, 574},
		{60, 574},
		{61, 574},
		{62, 574},
		{63, 574},
		{64, 574},
		{65, 574},
		{66, 574},
		{67, 574},
		{68, 574},
		{69, 574},
		{70, 574},
		{71, 574},
		{72, 574},
		{73, 574},
		{74, 574},
		{75, 574},
		{76, 574},
		{77, 574},
		{78, 574},
		{79, 574},
		{80, 574},
		{81, 574},
		{82, 574},
		{83, 574},
		{84, 574},
		{85, 574},
		{86, 574},
		{87, 574},
		{88, 574},
		{89, 574},
		{90, 574},

		{91, 574},
		{92, 574},
		{93, 574},
		{94, 574},
		{95, 574},
		{96, 574},
		{97, 574},
		{98, 574},
		{99, 574},
		{100, 574},
		{101, 574},
		{102, 574},
		{103, 574},
		{104, 574},
		{105, 574},
		{106, 574},
		{107, 574},
		{108, 574},
		{109, 574},
		{110, 574},
		{111, 574},
		{112, 574},
		{113, 574},
		{114, 574},
		{115, 574},
		{116, 574},
		{117, 574},
		{118, 574},
		{119, 574},
		{120, 574},
		{121, 574},
		{122, 574},
		{123, 574},
		{124, 574},
		{125, 574},
		{126, 574},
		{127, 574},
		{128, 574},
		{0, 1},
		{0, 1689},
		{1, 704},
		{2, 704},
		{3, 704},
		{4, 704},
		{5, 704},
		{6, 704},
		{7, 704},
		{8, 704},
		{9, 704},
		{0, 0},

		{11, 704},
		{12, 704},
		{13, 704},
		{14, 704},
		{15, 704},
		{16, 704},
		{17, 704},
		{18, 704},
		{19, 704},
		{20, 704},
		{21, 704},
		{22, 704},
		{23, 704},
		{24, 704},
		{25, 704},
		{26, 704},
		{27, 704},
		{28, 704},
		{29, 704},
		{30, 704},
		{31, 704},
		{32, 704},
		{33, 704},
		{34, 704},
		{35, 704},
		{36, 704},
		{37, 704},
		{38, 704},
		{39, 704},
		{40, 704},
		{41, 704},
		{42, 704},
		{43, 704},
		{44, 704},
		{45, 704},
		{46, 704},
		{47, 704},
		{48, 704},
		{49, 704},
		{50, 704},
		{51, 704},
		{52, 704},
		{53, 704},
		{54, 704},
		{55, 704},
		{56, 704},
		{57, 704},
		{58, 704},
		{59, 704},
		{60, 704},

		{61, 704},
		{62, 704},
		{63, 704},
		{64, 704},
		{65, 704},
		{66, 704},
		{67, 704},
		{68, 704},
		{69, 704},
		{70, 704},
		{71, 704},
		{72, 704},
		{73, 704},
		{74, 704},
		{75, 704},
		{76, 704},
		{77, 704},
		{78, 704},
		{79, 704},
		{80, 704},
		{81, 704},
		{82, 704},
		{83, 704},
		{84, 704},
		{85, 704},
		{86, 704},
		{87, 704},
		{88, 704},
		{89, 704},
		{90, 704},
		{91, 704},
		{92, 704},
		{93, 704},
		{94, 704},
		{95, 704},
		{96, 704},
		{97, 704},
		{98, 704},
		{99, 704},
		{100, 704},
		{101, 704},
		{102, 704},
		{103, 704},
		{104, 704},
		{105, 704},
		{106, 704},
		{107, 704},
		{108, 704},
		{109, 704},
		{110, 704},

		{111, 704},
		{112, 704},
		{113, 704},
		{114, 704},
		{115, 704},
		{116, 704},
		{117, 704},
		{118, 704},
		{119, 704},
		{120, 704},
		{121, 704},
		{122, 704},
		{123, 704},
		{124, 704},
		{125, 704},
		{126, 704},
		{127, 704},
		{128, 704},
		{0, 10},
		{0, 1559},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 9},
		{0, 1536},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 1524},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 704},
		{49, 704},
		{50, 704},
		{51, 704},
		{52, 704},
		{53, 704},
		{54, 704},
		{55, 704},
		{56, 704},
		{57, 704},
		{0, 0},
		{0, 1500},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{68, -466},
		{46, -23},
		{70, -464},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 12},
		{57, 12},

		{46, -35},
		{0, 0},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},
		{0, 7},
		{0, 1465},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{100, -466},
		{0, 0},
		{102, -464},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 655},
		{49, 655},
		{50, 655},
		{51, 655},
		{52, 655},
		{53, 655},
		{54, 655},
		{55, 655},
		{56, 655},
		{57, 655},
		{0, 6},
		{0, 1441},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{65, 655},
		{66, 655},
		{67, 655},
		{68, 655},
		{69, 655},
		{70, 655},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{46, -94},
		{0, 0},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{97, 655},
		{98, 655},
		{99, 655},
		{100, 655},
		{101, 655},
		{102, 655},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},

		{0, 0},
		{0, 0},
		{65, 0},
		{66, 0},
		{67, 0},
		{68, 0},
		{69, 0},
		{70, 0},
		{71, 0},
		{72, 0},
		{73, 0},
		{74, 0},
		{75, 0},
		{76, 0},
		{77, 0},
		{78, 0},
		{79, 0},
		{80, 0},
		{81, 0},
		{82, 0},
		{83, 0},
		{84, 0},
		{85, 0},
		{86, 0},
		{87, 0},
		{88, 0},
		{89, 0},
		{90, 0},
		{0, 10},
		{0, 1349},
		{0, 0},
		{0, 0},
		{95, 0},
		{0, 0},
		{97, 0},
		{98, 0},
		{99, 0},
		{100, 0},
		{101, 0},
		{102, 0},
		{103, 0},
		{104, 0},
		{105, 0},
		{106, 0},
		{107, 0},
		{108, 0},
		{109, 0},
		{110, 0},
		{111, 0},
		{112, 0},

		{113, 0},
		{114, 0},
		{115, 0},
		{116, 0},
		{117, 0},
		{118, 0},
		{119, 0},
		{120, 0},
		{121, 0},
		{122, 0},
		{0, 0},
		{0, 1317},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{68, -676},
		{69, 32},
		{70, -674},

		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 497},
		{49, 497},
		{50, 497},
		{51, 497},
		{52, 497},
		{53, 497},
		{54, 497},
		{55, 497},
		{56, 497},
		{57, 497},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{100, -676},
		{101, 32},
		{102, -674},
		{0, 0},
		{0, 1245},
		{1, 0},
		{2, 0},
		{3, 0},
		{4, 0},
		{5, 0},
		{6, 0},
		{7, 0},
		{8, 0},
		{9, 0},
		{10, 0},
		{11, 0},
		{12, 0},
		{13, 0},
		{14, 0},
		{15, 0},
		{16, 0},

		{17, 0},
		{18, 0},
		{19, 0},
		{20, 0},
		{21, 0},
		{22, 0},
		{23, 0},
		{24, 0},
		{25, 0},
		{26, 0},
		{27, 0},
		{28, 0},
		{29, 0},
		{30, 0},
		{31, 0},
		{32, 0},
		{33, 0},
		{34, 0},
		{35, 0},
		{36, 0},
		{37, 0},
		{38, 0},
		{39, 0},
		{40, 0},
		{41, 0},
		{42, 130},
		{43, 0},
		{44, 0},
		{45, 0},
		{46, 0},
		{47, 0},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},
		{58, 0},
		{59, 0},
		{60, 0},
		{61, 0},
		{62, 0},
		{63, 0},
		{64, 0},
		{65, 0},
		{66, 0},

		{67, 0},
		{68, 0},
		{69, 0},
		{70, 0},
		{71, 0},
		{72, 0},
		{73, 0},
		{74, 0},
		{75, 0},
		{76, 0},
		{77, 0},
		{78, 0},
		{79, 0},
		{80, 0},
		{81, 0},
		{82, 0},
		{83, 0},
		{84, 0},
		{85, 0},
		{86, 0},
		{87, 0},
		{88, 0},
		{89, 0},
		{90, 0},
		{91, 0},
		{92, 0},
		{93, 0},
		{94, 0},
		{95, 0},
		{96, 0},
		{97, 0},
		{98, 0},
		{99, 0},
		{100, 0},
		{101, 0},
		{102, 0},
		{103, 0},
		{104, 0},
		{105, 0},
		{106, 0},
		{107, 0},
		{108, 0},
		{109, 0},
		{110, 0},
		{111, 0},
		{112, 0},
		{113, 0},
		{114, 0},
		{115, 0},
		{116, 0},

		{117, 0},
		{118, 0},
		{119, 0},
		{120, 0},
		{121, 0},
		{122, 0},
		{123, 0},
		{124, 0},
		{125, 0},
		{126, 0},
		{127, 0},
		{128, 0},
		{0, 0},
		{0, 1115},
		{1, 399},
		{2, 399},
		{3, 399},
		{4, 399},
		{5, 399},
		{6, 399},
		{7, 399},
		{8, 399},
		{9, 399},
		{10, 399},
		{11, 399},
		{12, 399},
		{13, 399},
		{14, 399},
		{15, 399},
		{16, 399},
		{17, 399},
		{18, 399},
		{19, 399},
		{20, 399},
		{21, 399},
		{22, 399},
		{23, 399},
		{24, 399},
		{25, 399},
		{26, 399},
		{27, 399},
		{28, 399},
		{29, 399},
		{30, 399},
		{31, 399},
		{32, 399},
		{33, 399},
		{34, 399},
		{35, 399},
		{36, 399},

		{37, 399},
		{38, 399},
		{39, 399},
		{40, 399},
		{41, 399},
		{42, 0},
		{43, 399},
		{44, 399},
		{45, 399},
		{46, 399},
		{47, -906},
		{48, 399},
		{49, 399},
		{50, 399},
		{51, 399},
		{52, 399},
		{53, 399},
		{54, 399},
		{55, 399},
		{56, 399},
		{57, 399},
		{58, 399},
		{59, 399},
		{60, 399},
		{61, 399},
		{62, 399},
		{63, 399},
		{64, 399},
		{65, 399},
		{66, 399},
		{67, 399},
		{68, 399},
		{69, 399},
		{70, 399},
		{71, 399},
		{72, 399},
		{73, 399},
		{74, 399},
		{75, 399},
		{76, 399},
		{77, 399},
		{78, 399},
		{79, 399},
		{80, 399},
		{81, 399},
		{82, 399},
		{83, 399},
		{84, 399},
		{85, 399},
		{86, 399},

		{87, 399},
		{88, 399},
		{89, 399},
		{90, 399},
		{91, 399},
		{92, 399},
		{93, 399},
		{94, 399},
		{95, 399},
		{96, 399},
		{97, 399},
		{98, 399},
		{99, 399},
		{100, 399},
		{101, 399},
		{102, 399},
		{103, 399},
		{104, 399},
		{105, 399},
		{106, 399},
		{107, 399},
		{108, 399},
		{109, 399},
		{110, 399},
		{111, 399},
		{112, 399},
		{113, 399},
		{114, 399},
		{115, 399},
		{116, 399},
		{117, 399},
		{118, 399},
		{119, 399},
		{120, 399},
		{121, 399},
		{122, 399},
		{123, 399},
		{124, 399},
		{125, 399},
		{126, 399},
		{127, 399},
		{128, 399},
		{0, 1},
		{0, 985},
		{1, 0},
		{2, 0},
		{3, 0},
		{4, 0},
		{5, 0},
		{6, 0},

		{7, 0},
		{8, 0},
		{9, 0},
		{0, 0},
		{11, 0},
		{12, 0},
		{13, 0},
		{14, 0},
		{15, 0},
		{16, 0},
		{17, 0},
		{18, 0},
		{19, 0},
		{20, 0},
		{21, 0},
		{22, 0},
		{23, 0},
		{24, 0},
		{25, 0},
		{26, 0},
		{27, 0},
		{28, 0},
		{29, 0},
		{30, 0},
		{31, 0},
		{32, 0},
		{33, 0},
		{34, 0},
		{35, 0},
		{36, 0},
		{37, 0},
		{38, 0},
		{39, 0},
		{40, 0},
		{41, 0},
		{42, 0},
		{43, 0},
		{44, 0},
		{45, 0},
		{46, 0},
		{47, 0},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},

		{57, 0},
		{58, 0},
		{59, 0},
		{60, 0},
		{61, 0},
		{62, 0},
		{63, 0},
		{64, 0},
		{65, 0},
		{66, 0},
		{67, 0},
		{68, 0},
		{69, 0},
		{70, 0},
		{71, 0},
		{72, 0},
		{73, 0},
		{74, 0},
		{75, 0},
		{76, 0},
		{77, 0},
		{78, 0},
		{79, 0},
		{80, 0},
		{81, 0},
		{82, 0},
		{83, 0},
		{84, 0},
		{85, 0},
		{86, 0},
		{87, 0},
		{88, 0},
		{89, 0},
		{90, 0},
		{91, 0},
		{92, 0},
		{93, 0},
		{94, 0},
		{95, 0},
		{96, 0},
		{97, 0},
		{98, 0},
		{99, 0},
		{100, 0},
		{101, 0},
		{102, 0},
		{103, 0},
		{104, 0},
		{105, 0},
		{106, 0},

		{107, 0},
		{108, 0},
		{109, 0},
		{110, 0},
		{111, 0},
		{112, 0},
		{113, 0},
		{114, 0},
		{115, 0},
		{116, 0},
		{117, 0},
		{118, 0},
		{119, 0},
		{120, 0},
		{121, 0},
		{122, 0},
		{123, 0},
		{124, 0},
		{125, 0},
		{126, 0},
		{127, 0},
		{128, 0},
		{0, 10},
		{0, 855},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 8},
		{0, 845},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 10},
		{0, 820},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 269},
		{49, 269},
		{50, 269},
		{51, 269},
		{52, 269},
		{53, 269},
		{54, 269},
		{55, 269},
		{56, 269},
		{57, 269},
		{48, 282},
		{49, 282},
		{50, 282},
		{51, 282},
		{52, 282},
		{53, 282},
		{54, 282},
		{55, 282},
		{56, 282},
		{57, 282},
		{68, -1170},
		{69, 279},
		{70, -1168},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{65, 282},
		{66, 282},

		{67, 282},
		{68, 282},
		{69, 282},
		{70, 282},
		{0, 0},
		{0, 0},
		{48, 316},
		{49, 316},
		{50, 316},
		{51, 316},
		{52, 316},
		{53, 316},
		{54, 316},
		{55, 316},
		{56, 316},
		{57, 316},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{100, -1170},
		{101, 279},
		{102, -1168},
		{68, -1205},
		{0, 0},
		{70, -1203},
		{0, 0},
		{97, 282},
		{98, 282},
		{99, 282},
		{100, 282},
		{101, 282},
		{102, 282},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{100, -1205},
		{0, 0},
		{102, -1203},
		{0, 0},
		{0, 716},
		{1, 316},
		{2, 316},
		{3, 316},
		{4, 316},
		{5, 316},
		{6, 316},
		{7, 316},
		{8, 316},
		{9, 316},
		{10, 316},
		{11, 316},
		{12, 316},
		{13, 316},
		{14, 316},
		{15, 316},
		{16, 316},
		{17, 316},
		{18, 316},
		{19, 316},
		{20, 316},
		{21, 316},
		{22, 316},
		{23, 316},
		{24, 316},
		{25, 316},
		{26, 316},
		{27, 316},
		{28, 316},
		{29, 316},
		{30, 316},
		{31, 316},
		{32, 316},
		{33, 316},
		{34, 316},
		{35, 316},
		{36, 316},
		{37, 316},

		{38, 316},
		{39, 316},
		{40, 316},
		{41, 316},
		{42, 446},
		{43, 316},
		{44, 316},
		{45, 316},
		{46, 316},
		{47, 316},
		{48, 316},
		{49, 316},
		{50, 316},
		{51, 316},
		{52, 316},
		{53, 316},
		{54, 316},
		{55, 316},
		{56, 316},
		{57, 316},
		{58, 316},
		{59, 316},
		{60, 316},
		{61, 316},
		{62, 316},
		{63, 316},
		{64, 316},
		{65, 316},
		{66, 316},
		{67, 316},
		{68, 316},
		{69, 316},
		{70, 316},
		{71, 316},
		{72, 316},
		{73, 316},
		{74, 316},
		{75, 316},
		{76, 316},
		{77, 316},
		{78, 316},
		{79, 316},
		{80, 316},
		{81, 316},
		{82, 316},
		{83, 316},
		{84, 316},
		{85, 316},
		{86, 316},
		{87, 316},

		{88, 316},
		{89, 316},
		{90, 316},
		{91, 316},
		{92, 316},
		{93, 316},
		{94, 316},
		{95, 316},
		{96, 316},
		{97, 316},
		{98, 316},
		{99, 316},
		{100, 316},
		{101, 316},
		{102, 316},
		{103, 316},
		{104, 316},
		{105, 316},
		{106, 316},
		{107, 316},
		{108, 316},
		{109, 316},
		{110, 316},
		{111, 316},
		{112, 316},
		{113, 316},
		{114, 316},
		{115, 316},
		{116, 316},
		{117, 316},
		{118, 316},
		{119, 316},
		{120, 316},
		{121, 316},
		{122, 316},
		{123, 316},
		{124, 316},
		{125, 316},
		{126, 316},
		{127, 316},
		{128, 316},
		{0, 10},
		{0, 586},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 576},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 8},
		{0, 563},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},

		{48, 436},
		{49, 436},
		{50, 436},
		{51, 436},
		{52, 436},
		{53, 436},
		{54, 436},
		{55, 436},
		{56, 436},
		{57, 436},
		{68, -1439},
		{69, 10},
		{70, -1437},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},
		{0, 10},
		{0, 504},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{65, 0},
		{66, 0},
		{67, 0},
		{68, 0},
		{69, 0},
		{70, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{100, -1439},
		{101, 10},
		{102, -1437},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{97, 0},
		{98, 0},
		{99, 0},
		{100, 0},
		{101, 0},
		{102, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{68, -1521},
		{0, 0},
		{70, -1519},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{100, -1521},
		{0, 0},
		{102, -1519},
		{0, 0},
		{0, 400},
		{1, 0},
		{2, 0},
		{3, 0},
		{4, 0},
		{5, 0},
		{6, 0},
		{7, 0},
		{8, 0},
		{9, 0},
		{10, 0},
		{11, 0},
		{12, 0},
		{13, 0},
		{14, 0},
		{15, 0},
		{16, 0},
		{17, 0},
		{18, 0},
		{19, 0},
		{20, 0},
		{21, 0},

		{22, 0},
		{23, 0},
		{24, 0},
		{25, 0},
		{26, 0},
		{27, 0},
		{28, 0},
		{29, 0},
		{30, 0},
		{31, 0},
		{32, 0},
		{33, 0},
		{34, 0},
		{35, 0},
		{36, 0},
		{37, 0},
		{38, 0},
		{39, 0},
		{40, 0},
		{41, 0},
		{42, 130},
		{43, 0},
		{44, 0},
		{45, 0},
		{46, 0},
		{47, 0},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},
		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},
		{58, 0},
		{59, 0},
		{60, 0},
		{61, 0},
		{62, 0},
		{63, 0},
		{64, 0},
		{65, 0},
		{66, 0},
		{67, 0},
		{68, 0},
		{69, 0},
		{70, 0},
		{71, 0},

		{72, 0},
		{73, 0},
		{74, 0},
		{75, 0},
		{76, 0},
		{77, 0},
		{78, 0},
		{79, 0},
		{80, 0},
		{81, 0},
		{82, 0},
		{83, 0},
		{84, 0},
		{85, 0},
		{86, 0},
		{87, 0},
		{88, 0},
		{89, 0},
		{90, 0},
		{91, 0},
		{92, 0},
		{93, 0},
		{94, 0},
		{95, 0},
		{96, 0},
		{97, 0},
		{98, 0},
		{99, 0},
		{100, 0},
		{101, 0},
		{102, 0},
		{103, 0},
		{104, 0},
		{105, 0},
		{106, 0},
		{107, 0},
		{108, 0},
		{109, 0},
		{110, 0},
		{111, 0},
		{112, 0},
		{113, 0},
		{114, 0},
		{115, 0},
		{116, 0},
		{117, 0},
		{118, 0},
		{119, 0},
		{120, 0},
		{121, 0},

		{122, 0},
		{123, 0},
		{124, 0},
		{125, 0},
		{126, 0},
		{127, 0},
		{128, 0},
		{0, 0},
		{0, 270},
		{1, -446},
		{2, -446},
		{3, -446},
		{4, -446},
		{5, -446},
		{6, -446},
		{7, -446},
		{8, -446},
		{9, -446},
		{10, -446},
		{11, -446},
		{12, -446},
		{13, -446},
		{14, -446},
		{15, -446},
		{16, -446},
		{17, -446},
		{18, -446},
		{19, -446},
		{20, -446},
		{21, -446},
		{22, -446},
		{23, -446},
		{24, -446},
		{25, -446},
		{26, -446},
		{27, -446},
		{28, -446},
		{29, -446},
		{30, -446},
		{31, -446},
		{32, -446},
		{33, -446},
		{34, -446},
		{35, -446},
		{36, -446},
		{37, -446},
		{38, -446},
		{39, -446},
		{40, -446},
		{41, -446},

		{42, 0},
		{43, -446},
		{44, -446},
		{45, -446},
		{46, -446},
		{47, -1751},
		{48, -446},
		{49, -446},
		{50, -446},
		{51, -446},
		{52, -446},
		{53, -446},
		{54, -446},
		{55, -446},
		{56, -446},
		{57, -446},
		{58, -446},
		{59, -446},
		{60, -446},
		{61, -446},
		{62, -446},
		{63, -446},
		{64, -446},
		{65, -446},
		{66, -446},
		{67, -446},
		{68, -446},
		{69, -446},
		{70, -446},
		{71, -446},
		{72, -446},
		{73, -446},
		{74, -446},
		{75, -446},
		{76, -446},
		{77, -446},
		{78, -446},
		{79, -446},
		{80, -446},
		{81, -446},
		{82, -446},
		{83, -446},
		{84, -446},
		{85, -446},
		{86, -446},
		{87, -446},
		{88, -446},
		{89, -446},
		{90, -446},
		{91, -446},

		{92, -446},
		{93, -446},
		{94, -446},
		{95, -446},
		{96, -446},
		{97, -446},
		{98, -446},
		{99, -446},
		{100, -446},
		{101, -446},
		{102, -446},
		{103, -446},
		{104, -446},
		{105, -446},
		{106, -446},
		{107, -446},
		{108, -446},
		{109, -446},
		{110, -446},
		{111, -446},
		{112, -446},
		{113, -446},
		{114, -446},
		{115, -446},
		{116, -446},
		{117, -446},
		{118, -446},
		{119, -446},
		{120, -446},
		{121, -446},
		{122, -446},
		{123, -446},
		{124, -446},
		{125, -446},
		{126, -446},
		{127, -446},
		{128, -446},
		{0, 10},
		{0, 140},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 10},
		{0, 130},
		{0, 0},

		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{48, 10},
		{49, 10},
		{50, 10},
		{51, 10},
		{52, 10},
		{53, 10},
		{54, 10},
		{55, 10},
		{56, 10},
		{57, 10},
		{48, 0},
		{49, 0},
		{50, 0},
		{51, 0},

		{52, 0},
		{53, 0},
		{54, 0},
		{55, 0},
		{56, 0},
		{57, 0},
		{68, -1885},
		{0, 0},
		{70, -1883},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{68, -1895},
		{0, 0},
		{70, -1893},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{100, -1885},
		{0, 0},
		{102, -1883},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{100, -1895},
		{0, 0},

		{102, -1893},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{129, 14},
		{1, 0},
};

static yyconst struct yy_trans_info *yy_start_state_list[3] =
	{
		&yy_transition[1],
		&yy_transition[3],
		&yy_transition[133],

};

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[14] =
	{
		0,
		0,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "mdl/MDLScanner.l"
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1
/* //https://westes.github.io/flex/manual/Patterns.html#Patterns */
#line 913 "mdl/MDLScanner.inl"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
{

	/* User-defined. Not touched by flex. */
	YY_EXTRA_TYPE yyextra_r;

	/* The rest are the same as the globals declared in the non-reentrant scanner. */
	FILE *yyin_r, *yyout_r;
	size_t yy_buffer_stack_top;		  /**< index of top of stack. */
	size_t yy_buffer_stack_max;		  /**< capacity of stack. */
	YY_BUFFER_STATE *yy_buffer_stack; /**< Stack as an array. */
	char yy_hold_char;
	int yy_n_chars;
	int yyleng_r;
	char *yy_c_buf_p;
	int yy_init;
	int yy_start;
	int yy_did_buffer_switch_on_eof;
	int yy_start_stack_ptr;
	int yy_start_stack_depth;
	int *yy_start_stack;
	yy_state_type yy_last_accepting_state;
	char *yy_last_accepting_cpos;

	int yylineno_r;
	int yy_flex_debug_r;

	char *yytext_r;
	int yy_more_flag;
	int yy_more_len;

}; /* end struct yyguts_t */

static int yy_init_globals(yyscan_t yyscanner);

int mdl_lllex_init(yyscan_t *scanner);

int mdl_lllex_init_extra(YY_EXTRA_TYPE user_defined, yyscan_t *scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int mdl_lllex_destroy(yyscan_t yyscanner);

int mdl_llget_debug(yyscan_t yyscanner);

void mdl_llset_debug(int debug_flag, yyscan_t yyscanner);

YY_EXTRA_TYPE mdl_llget_extra(yyscan_t yyscanner);

void mdl_llset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner);

FILE *mdl_llget_in(yyscan_t yyscanner);

void mdl_llset_in(FILE *_in_str, yyscan_t yyscanner);

FILE *mdl_llget_out(yyscan_t yyscanner);

void mdl_llset_out(FILE *_out_str, yyscan_t yyscanner);

int mdl_llget_leng(yyscan_t yyscanner);

char *mdl_llget_text(yyscan_t yyscanner);

int mdl_llget_lineno(yyscan_t yyscanner);

void mdl_llset_lineno(int _line_number, yyscan_t yyscanner);

int mdl_llget_column(yyscan_t yyscanner);

void mdl_llset_column(int _column_no, yyscan_t yyscanner);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mdl_llwrap(yyscan_t yyscanner);
#else
extern int mdl_llwrap(yyscan_t yyscanner);
#endif
#endif

#ifndef YY_NO_UNPUT

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int, yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *, yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner);
#else
static int input(yyscan_t yyscanner);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO                                          \
	do                                                \
	{                                                 \
		if (fwrite(yytext, (size_t)yyleng, 1, yyout)) \
		{                                             \
		}                                             \
	} while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                      \
	errno = 0;                                                               \
	while ((result = (int)read(fileno(yyin), buf, (yy_size_t)max_size)) < 0) \
	{                                                                        \
		if (errno != EINTR)                                                  \
		{                                                                    \
			YY_FATAL_ERROR("input in flex scanner failed");                  \
			break;                                                           \
		}                                                                    \
		errno = 0;                                                           \
		clearerr(yyin);                                                      \
	}

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg, yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int mdl_lllex(yyscan_t yyscanner);

#define YY_DECL int mdl_lllex(yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/ break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	if (!yyg->yy_init)
	{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if (!yyg->yy_start)
			yyg->yy_start = 1; /* first start state */

		if (!yyin)
			yyin = stdin;

		if (!yyout)
			yyout = stdout;

		if (!YY_CURRENT_BUFFER)
		{
			mdl_llensure_buffer_stack(yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				mdl_ll_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
		}

		mdl_ll_load_buffer_state(yyscanner);
	}

	{
#line 29 "mdl/MDLScanner.l"

#line 1159 "mdl/MDLScanner.inl"

		while (/*CONSTCOND*/ 1) /* loops until end-of-file is reached */
		{
			yy_cp = yyg->yy_c_buf_p;

			/* Support of yytext. */
			*yy_cp = yyg->yy_hold_char;

			/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
			yy_bp = yy_cp;

			yy_current_state = yy_start_state_list[yyg->yy_start];
		yy_match:
		{
			yyconst struct yy_trans_info *yy_trans_info;

			YY_CHAR yy_c;

			for (yy_c = YY_SC_TO_UI(*yy_cp);
				 (yy_trans_info = &yy_current_state[(unsigned int)yy_c])->yy_verify == yy_c;
				 yy_c = YY_SC_TO_UI(*++yy_cp))
			{
				yy_current_state += yy_trans_info->yy_nxt;

				if (yy_current_state[-1].yy_nxt)
				{
					yyg->yy_last_accepting_state = yy_current_state;
					yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

		yy_find_action:
			yy_act = yy_current_state[-1].yy_nxt;

			YY_DO_BEFORE_ACTION;

			if (yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act])
			{
				yy_size_t yyl;
				for (yyl = 0; yyl < yyleng; ++yyl)
					if (yytext[yyl] == '\n')

						do
						{
							yylineno++;
							yycolumn = 0;
						} while (0);
			}

		do_action: /* This label is used only to access EOF actions. */

			switch (yy_act)
			{		/* beginning of action switch */
			case 0: /* must back up */
				/* undo the effects of YY_DO_BEFORE_ACTION */
				*yy_cp = yyg->yy_hold_char;
				yy_cp = yyg->yy_last_accepting_cpos + 1;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;

			case 1:
				YY_RULE_SETUP
#line 31 "mdl/MDLScanner.l"
				{ /* Single line comment */
				}
				YY_BREAK
			case 2:
				/* rule 2 can match eol */
				YY_RULE_SETUP
#line 33 "mdl/MDLScanner.l"
				{ /* Multiline comment */
				}
				YY_BREAK
			case 3:
				YY_RULE_SETUP
#line 35 "mdl/MDLScanner.l"
				{
					YY_FATAL_ERROR("Unterminated comment");
				}
				YY_BREAK
			case 4:
				YY_RULE_SETUP
#line 37 "mdl/MDLScanner.l"
				{
				}
				YY_BREAK
			case 5:
				YY_RULE_SETUP
#line 39 "mdl/MDLScanner.l"
				{
					return ';';
				}
				YY_BREAK
			case 6:
				YY_RULE_SETUP
#line 43 "mdl/MDLScanner.l"
				{
					lvalp->_IDENT = MDLFrontend_HashIdentName(yyextra, yytext);
					{
						llocp->first_line = yylineno;
						llocp->first_column = yycolumn;
						llocp->last_line = yylineno;
						llocp->last_column = yycolumn;
					}
					return YYTOKEN_IDENT;
				}
				YY_BREAK
			case 7:
				YY_RULE_SETUP
#line 49 "mdl/MDLScanner.l"
				{
					char *endptr = NULL;
					lvalp->_INTEGER_LITERAL = strtol(yytext, &endptr, 10);
					assert(endptr <= ((yytext) + (yyleng)));
					{
						llocp->first_line = yylineno;
						llocp->first_column = yycolumn;
						llocp->last_line = yylineno;
						llocp->last_column = yycolumn;
					}
					return YYTOKEN_INTEGER_LITERAL;
				}
				YY_BREAK
			case 8:
				YY_RULE_SETUP
#line 57 "mdl/MDLScanner.l"
				{
					char *endptr = NULL;
					lvalp->_INTEGER_LITERAL = strtol(yytext, &endptr, 16);
					assert(endptr <= ((yytext) + (yyleng)));
					{
						llocp->first_line = yylineno;
						llocp->first_column = yycolumn;
						llocp->last_line = yylineno;
						llocp->last_column = yycolumn;
					}
					return YYTOKEN_INTEGER_LITERAL;
				}
				YY_BREAK
			case 9:
				YY_RULE_SETUP
#line 65 "mdl/MDLScanner.l"
				{
					char *endptr = NULL;
					lvalp->_INTEGER_LITERAL = strtol(yytext, &endptr, 8);
					assert(endptr <= ((yytext) + (yyleng)));
					{
						llocp->first_line = yylineno;
						llocp->first_column = yycolumn;
						llocp->last_line = yylineno;
						llocp->last_column = yycolumn;
					}
					return YYTOKEN_INTEGER_LITERAL;
				}
				YY_BREAK
			case 10:
				YY_RULE_SETUP
#line 73 "mdl/MDLScanner.l"
				{
					char *endptr = NULL;
					lvalp->_FLOATING_LITERAL = strtof(yytext, &endptr);
					assert(endptr <= ((yytext) + (yyleng)));
					{
						llocp->first_line = yylineno;
						llocp->first_column = yycolumn;
						llocp->last_line = yylineno;
						llocp->last_column = yycolumn;
					}
					return YYTOKEN_FLOATING_LITERAL;
				}
				YY_BREAK
			case 11:
				YY_RULE_SETUP
#line 80 "mdl/MDLScanner.l"
				{
					char *endptr = NULL;
					lvalp->_FLOATING_LITERAL = strtod(yytext, &endptr);
					assert(endptr <= ((yytext) + (yyleng)));
					{
						llocp->first_line = yylineno;
						llocp->first_column = yycolumn;
						llocp->last_line = yylineno;
						llocp->last_column = yycolumn;
					}
					return YYTOKEN_FLOATING_LITERAL;
				}
				YY_BREAK
			/* catch-all rule for any other single characters */
			case 12:
				YY_RULE_SETUP
#line 89 "mdl/MDLScanner.l"
				{
					/* Error */
					{
						llocp->first_line = yylineno;
						llocp->first_column = yycolumn;
						llocp->last_line = yylineno;
						llocp->last_column = yycolumn;
					}
					return yytext[0];
				}
				YY_BREAK
			case 13:
				YY_RULE_SETUP
#line 95 "mdl/MDLScanner.l"
				ECHO;
				YY_BREAK
#line 1330 "mdl/MDLScanner.inl"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

			case YY_END_OF_BUFFER:
			{
				/* Amount of text matched not including the EOB char. */
				int yy_amount_of_matched_text = (int)(yy_cp - yyg->yytext_ptr) - 1;

				/* Undo the effects of YY_DO_BEFORE_ACTION. */
				*yy_cp = yyg->yy_hold_char;
				YY_RESTORE_YY_MORE_OFFSET

				if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW)
				{
					/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * mdl_lllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
					yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
					YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
					YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
				}

				/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
				if (yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars])
				{ /* This was really a NUL. */
					yy_state_type yy_next_state;

					yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

					yy_current_state = yy_get_previous_state(yyscanner);

					/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

					yy_next_state = yy_try_NUL_trans(yy_current_state, yyscanner);

					yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

					if (yy_next_state)
					{
						/* Consume the NUL. */
						yy_cp = ++yyg->yy_c_buf_p;
						yy_current_state = yy_next_state;
						goto yy_match;
					}

					else
					{
						yy_cp = yyg->yy_c_buf_p;
						goto yy_find_action;
					}
				}

				else
					switch (yy_get_next_buffer(yyscanner))
					{
					case EOB_ACT_END_OF_FILE:
					{
						yyg->yy_did_buffer_switch_on_eof = 0;

						if (mdl_llwrap(yyscanner))
						{
							/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
							yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

							yy_act = YY_STATE_EOF(YY_START);
							goto do_action;
						}

						else
						{
							if (!yyg->yy_did_buffer_switch_on_eof)
								YY_NEW_FILE;
						}
						break;
					}

					case EOB_ACT_CONTINUE_SCAN:
						yyg->yy_c_buf_p =
							yyg->yytext_ptr + yy_amount_of_matched_text;

						yy_current_state = yy_get_previous_state(yyscanner);

						yy_cp = yyg->yy_c_buf_p;
						yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
						goto yy_match;

					case EOB_ACT_LAST_MATCH:
						yyg->yy_c_buf_p =
							&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

						yy_current_state = yy_get_previous_state(yyscanner);

						yy_cp = yyg->yy_c_buf_p;
						yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
						goto yy_find_action;
					}
				break;
			}

			default:
				YY_FATAL_ERROR(
					"fatal flex scanner internal error--no action found");
			} /* end of action switch */
		}	  /* end of scanning one token */
	}		  /* end of user's declarations */
} /* end of mdl_lllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if (yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1])
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--end of buffer missed");

	if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0)
	{ /* Don't try to fill the buffer, so this is an EOF. */
		if (yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1)
		{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}

		else
		{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
		}
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t)(yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for (i = 0; i < number_to_move; ++i)
		*(dest++) = *(source++);

	if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
	{
		int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while (num_to_read <= 0)
		{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int)(yyg->yy_c_buf_p - b->yy_ch_buf);

			if (b->yy_is_our_buffer)
			{
				int new_size = b->yy_buf_size * 2;

				if (new_size <= 0)
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mdl_llrealloc((void *)b->yy_ch_buf, (yy_size_t)(b->yy_buf_size + 2), yyscanner);
			}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if (!b->yy_ch_buf)
				YY_FATAL_ERROR(
					"fatal error - scanner input buffer overflow");

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						  number_to_move - 1;
		}

		if (num_to_read > YY_READ_BUF_SIZE)
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
				 yyg->yy_n_chars, num_to_read);

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
	}

	if (yyg->yy_n_chars == 0)
	{
		if (number_to_move == YY_MORE_ADJ)
		{
			ret_val = EOB_ACT_END_OF_FILE;
			mdl_llrestart(yyin, yyscanner);
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int)(yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
	{
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *)mdl_llrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t)new_size, yyscanner);
		if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
			YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	yy_current_state = yy_start_state_list[yyg->yy_start];

	for (yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp)
	{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
		if (yy_current_state[-1].yy_nxt)
		{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
		}
	}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state, yyscan_t yyscanner)
{
	int yy_is_jam;
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	int yy_c = 128;
	yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int)yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if (!yy_is_jam)
	{
		if (yy_current_state[-1].yy_nxt)
		{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
		}
	}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner)
#else
static int input(yyscan_t yyscanner)
#endif

{
	int c;
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if (*yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
	{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if (yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars])
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
		{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch (yy_get_next_buffer(yyscanner))
			{
			case EOB_ACT_LAST_MATCH:
				/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

				/* Reset buffer status. */
				mdl_llrestart(yyin, yyscanner);

				/*FALLTHROUGH*/

			case EOB_ACT_END_OF_FILE:
			{
				if (mdl_llwrap(yyscanner))
					return 0;

				if (!yyg->yy_did_buffer_switch_on_eof)
					YY_NEW_FILE;
#ifdef __cplusplus
				return yyinput(yyscanner);
#else
				return input(yyscanner);
#endif
			}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
				break;
			}
		}
	}

	c = *(unsigned char *)yyg->yy_c_buf_p; /* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';			   /* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if (c == '\n')

		do
		{
			yylineno++;
			yycolumn = 0;
		} while (0);

	return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
void mdl_llrestart(FILE *input_file, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	if (!YY_CURRENT_BUFFER)
	{
		mdl_llensure_buffer_stack(yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
			mdl_ll_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
	}

	mdl_ll_init_buffer(YY_CURRENT_BUFFER, input_file, yyscanner);
	mdl_ll_load_buffer_state(yyscanner);
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
void mdl_ll_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mdl_llpop_buffer_state();
	 *		mdl_llpush_buffer_state(new_buffer);
     */
	mdl_llensure_buffer_stack(yyscanner);
	if (YY_CURRENT_BUFFER == new_buffer)
		return;

	if (YY_CURRENT_BUFFER)
	{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
	}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	mdl_ll_load_buffer_state(yyscanner);

	/* We don't actually know whether we did this switch during
	 * EOF (mdl_llwrap()) processing, but the only time this flag
	 * is looked at is after mdl_llwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void mdl_ll_load_buffer_state(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE mdl_ll_create_buffer(FILE *file, int size, yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE)mdl_llalloc(sizeof(struct yy_buffer_state), yyscanner);
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in mdl_ll_create_buffer()");

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *)mdl_llalloc((yy_size_t)(b->yy_buf_size + 2), yyscanner);
	if (!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in mdl_ll_create_buffer()");

	b->yy_is_our_buffer = 1;

	mdl_ll_init_buffer(b, file, yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with mdl_ll_create_buffer()
 * @param yyscanner The scanner object.
 */
void mdl_ll_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	if (!b)
		return;

	if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

	if (b->yy_is_our_buffer)
		mdl_llfree((void *)b->yy_ch_buf, yyscanner);

	mdl_llfree((void *)b, yyscanner);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mdl_llrestart() or at EOF.
 */
static void mdl_ll_init_buffer(YY_BUFFER_STATE b, FILE *file, yyscan_t yyscanner)

{
	int oerrno = errno;
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	mdl_ll_flush_buffer(b, yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	/* If b is the current buffer, then mdl_ll_init_buffer was _probably_
     * called from mdl_llrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
	if (b != YY_CURRENT_BUFFER)
	{
		b->yy_bs_lineno = 1;
		b->yy_bs_column = 0;
	}

	b->yy_is_interactive = 0;

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
void mdl_ll_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	if (!b)
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if (b == YY_CURRENT_BUFFER)
		mdl_ll_load_buffer_state(yyscanner);
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void mdl_llpush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	if (new_buffer == NULL)
		return;

	mdl_llensure_buffer_stack(yyscanner);

	/* This block is copied from mdl_ll_switch_to_buffer. */
	if (YY_CURRENT_BUFFER)
	{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
	}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from mdl_ll_switch_to_buffer. */
	mdl_ll_load_buffer_state(yyscanner);
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void mdl_llpop_buffer_state(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	mdl_ll_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER)
	{
		mdl_ll_load_buffer_state(yyscanner);
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mdl_llensure_buffer_stack(yyscan_t yyscanner)
{
	int num_to_alloc;
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	if (!yyg->yy_buffer_stack)
	{

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state **)mdl_llalloc(num_to_alloc * sizeof(struct yy_buffer_state *), yyscanner);
		if (!yyg->yy_buffer_stack)
			YY_FATAL_ERROR("out of dynamic memory in mdl_llensure_buffer_stack()");

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state *));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1)
	{

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state **)mdl_llrealloc(yyg->yy_buffer_stack,
																		num_to_alloc * sizeof(struct yy_buffer_state *), yyscanner);
		if (!yyg->yy_buffer_stack)
			YY_FATAL_ERROR("out of dynamic memory in mdl_llensure_buffer_stack()");

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state *));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE mdl_ll_scan_buffer(char *base, yy_size_t size, yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;

	if (size < 2 ||
		base[size - 2] != YY_END_OF_BUFFER_CHAR ||
		base[size - 1] != YY_END_OF_BUFFER_CHAR)
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE)mdl_llalloc(sizeof(struct yy_buffer_state), yyscanner);
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in mdl_ll_scan_buffer()");

	b->yy_buf_size = (int)(size - 2); /* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	mdl_ll_switch_to_buffer(b, yyscanner);

	return b;
}

/** Setup the input buffer state to scan a string. The next call to mdl_lllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       mdl_ll_scan_bytes() instead.
 */
YY_BUFFER_STATE mdl_ll_scan_string(yyconst char *yystr, yyscan_t yyscanner)
{

	return mdl_ll_scan_bytes(yystr, (int)strlen(yystr), yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to mdl_lllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE mdl_ll_scan_bytes(yyconst char *yybytes, int _yybytes_len, yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t)(_yybytes_len + 2);
	buf = (char *)mdl_llalloc(n, yyscanner);
	if (!buf)
		YY_FATAL_ERROR("out of dynamic memory in mdl_ll_scan_bytes()");

	for (i = 0; i < _yybytes_len; ++i)
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

	b = mdl_ll_scan_buffer(buf, n, yyscanner);
	if (!b)
		YY_FATAL_ERROR("bad buffer in mdl_ll_scan_bytes()");

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error(yyconst char *msg, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	(void)yyg;
	(void)fprintf(stderr, "%s\n", msg);
	exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                    \
	do                                               \
	{                                                \
		/* Undo effects of setting up yytext. */     \
		yy_size_t yyless_macro_arg = (n);            \
		YY_LESS_LINENO(yyless_macro_arg);            \
		yytext[yyleng] = yyg->yy_hold_char;          \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p;        \
		*yyg->yy_c_buf_p = '\0';                     \
		yyleng = yyless_macro_arg;                   \
	} while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE mdl_llget_extra(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int mdl_llget_lineno(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	if (!YY_CURRENT_BUFFER)
		return 0;

	return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int mdl_llget_column(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	if (!YY_CURRENT_BUFFER)
		return 0;

	return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *mdl_llget_in(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *mdl_llget_out(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int mdl_llget_leng(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *mdl_llget_text(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void mdl_llset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	yyextra = user_defined;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void mdl_llset_lineno(int _line_number, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	/* lineno is only valid if an input buffer exists. */
	if (!YY_CURRENT_BUFFER)
		YY_FATAL_ERROR("mdl_llset_lineno called with no buffer");

	yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void mdl_llset_column(int _column_no, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	/* column is only valid if an input buffer exists. */
	if (!YY_CURRENT_BUFFER)
		YY_FATAL_ERROR("mdl_llset_column called with no buffer");

	yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see mdl_ll_switch_to_buffer
 */
void mdl_llset_in(FILE *_in_str, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	yyin = _in_str;
}

void mdl_llset_out(FILE *_out_str, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	yyout = _out_str;
}

int mdl_llget_debug(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	return yy_flex_debug;
}

void mdl_llset_debug(int _bdebug, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	yy_flex_debug = _bdebug;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* mdl_lllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int mdl_lllex_init(yyscan_t *ptr_yy_globals)

{
	if (ptr_yy_globals == NULL)
	{
		errno = EINVAL;
		return 1;
	}

	*ptr_yy_globals = (yyscan_t)mdl_llalloc(sizeof(struct yyguts_t), NULL);

	if (*ptr_yy_globals == NULL)
	{
		errno = ENOMEM;
		return 1;
	}

	/* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
	memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

	return yy_init_globals(*ptr_yy_globals);
}

/* mdl_lllex_init_extra has the same functionality as mdl_lllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to mdl_llalloc in
 * the yyextra field.
 */

int mdl_lllex_init_extra(YY_EXTRA_TYPE yy_user_defined, yyscan_t *ptr_yy_globals)

{
	struct yyguts_t dummy_yyguts;

	mdl_llset_extra(yy_user_defined, &dummy_yyguts);

	if (ptr_yy_globals == NULL)
	{
		errno = EINVAL;
		return 1;
	}

	*ptr_yy_globals = (yyscan_t)mdl_llalloc(sizeof(struct yyguts_t), &dummy_yyguts);

	if (*ptr_yy_globals == NULL)
	{
		errno = ENOMEM;
		return 1;
	}

	/* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
	memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

	mdl_llset_extra(yy_user_defined, *ptr_yy_globals);

	return yy_init_globals(*ptr_yy_globals);
}

static int yy_init_globals(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	/* Initialization is the same as for the non-reentrant scanner.
     * This function is called from mdl_lllex_destroy(), so don't allocate here.
     */

	yyg->yy_buffer_stack = NULL;
	yyg->yy_buffer_stack_top = 0;
	yyg->yy_buffer_stack_max = 0;
	yyg->yy_c_buf_p = NULL;
	yyg->yy_init = 0;
	yyg->yy_start = 0;

	yyg->yy_start_stack_ptr = 0;
	yyg->yy_start_stack_depth = 0;
	yyg->yy_start_stack = NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
	yyin = stdin;
	yyout = stdout;
#else
	yyin = NULL;
	yyout = NULL;
#endif

	/* For future reference: Set errno on error, since we are called by
     * mdl_lllex_init()
     */
	return 0;
}

/* mdl_lllex_destroy is for both reentrant and non-reentrant scanners. */
int mdl_lllex_destroy(yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

	/* Pop the buffer stack, destroying each element. */
	while (YY_CURRENT_BUFFER)
	{
		mdl_ll_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mdl_llpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	mdl_llfree(yyg->yy_buffer_stack, yyscanner);
	yyg->yy_buffer_stack = NULL;

	/* Destroy the start condition stack. */
	mdl_llfree(yyg->yy_start_stack, yyscanner);
	yyg->yy_start_stack = NULL;

	/* Reset the globals. This is important in a non-reentrant scanner so the next time
     * mdl_lllex() is called, initialization will occur. */
	yy_init_globals(yyscanner);

	/* Destroy the main struct (reentrant only). */
	mdl_llfree(yyscanner, yyscanner);
	yyscanner = NULL;
	return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n, yyscan_t yyscanner)
{
	struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
	(void)yyg;

	int i;
	for (i = 0; i < n; ++i)
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *s, yyscan_t yyscanner)
{
	int n;
	for (n = 0; s[n]; ++n)
		;

	return n;
}
#endif

#define YYTABLES_NAME "yytables"

#line 95 "mdl/MDLScanner.l"
