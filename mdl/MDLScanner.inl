#line 2 "mdl/MDLScanner.inl"

#line 4 "mdl/MDLScanner.inl"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mdl_llrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE mdl_lllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mdl_llrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void mdl_llrestart (FILE *input_file ,yyscan_t yyscanner );
void mdl_ll_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE mdl_ll_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void mdl_ll_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void mdl_ll_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void mdl_llpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void mdl_llpop_buffer_state (yyscan_t yyscanner );

static void mdl_llensure_buffer_stack (yyscan_t yyscanner );
static void mdl_ll_load_buffer_state (yyscan_t yyscanner );
static void mdl_ll_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER mdl_ll_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE mdl_ll_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE mdl_ll_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE mdl_ll_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *mdl_llalloc (yy_size_t ,yyscan_t yyscanner );
void *mdl_llrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void mdl_llfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer mdl_ll_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mdl_llensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mdl_ll_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mdl_llensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mdl_ll_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef char YY_CHAR;

typedef yyconst struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 15
#define YY_END_OF_BUFFER 16
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[3728] =
    {
 {   0,   0 }, {   0,3600 }, {   0,   0 }, {   0,3598 }, {   1, 260 },
 {   2, 260 }, {   3, 260 }, {   4, 260 }, {   5, 260 }, {   6, 260 },
 {   7, 260 }, {   8, 260 }, {   9, 262 }, {  10, 264 }, {  11, 260 },
 {  12, 260 }, {  13, 262 }, {  14, 260 }, {  15, 260 }, {  16, 260 },
 {  17, 260 }, {  18, 260 }, {  19, 260 }, {  20, 260 }, {  21, 260 },
 {  22, 260 }, {  23, 260 }, {  24, 260 }, {  25, 260 }, {  26, 260 },
 {  27, 260 }, {  28, 260 }, {  29, 260 }, {  30, 260 }, {  31, 260 },
 {  32, 262 }, {  33, 260 }, {  34, 260 }, {  35, 260 }, {  36, 260 },
 {  37, 260 }, {  38, 260 }, {  39, 260 }, {  40, 260 }, {  41, 260 },
 {  42, 260 }, {  43, 260 }, {  44, 260 }, {  45, 260 }, {  46, 267 },

 {  47, 283 }, {  48, 296 }, {  49, 372 }, {  50, 372 }, {  51, 372 },
 {  52, 372 }, {  53, 372 }, {  54, 372 }, {  55, 372 }, {  56, 372 },
 {  57, 372 }, {  58, 260 }, {  59, 285 }, {  60, 260 }, {  61, 260 },
 {  62, 260 }, {  63, 260 }, {  64, 260 }, {  65, 433 }, {  66, 433 },
 {  67, 433 }, {  68, 433 }, {  69, 433 }, {  70, 433 }, {  71, 433 },
 {  72, 433 }, {  73, 433 }, {  74, 433 }, {  75, 433 }, {  76, 433 },
 {  77, 433 }, {  78, 433 }, {  79, 433 }, {  80, 433 }, {  81, 433 },
 {  82, 433 }, {  83, 433 }, {  84, 433 }, {  85, 433 }, {  86, 433 },
 {  87, 433 }, {  88, 433 }, {  89, 433 }, {  90, 433 }, {  91, 260 },
 {  92, 260 }, {  93, 260 }, {  94, 260 }, {  95, 260 }, {  96, 260 },

 {  97, 433 }, {  98, 433 }, {  99, 433 }, { 100, 433 }, { 101, 433 },
 { 102, 433 }, { 103, 433 }, { 104, 433 }, { 105, 557 }, { 106, 433 },
 { 107, 433 }, { 108, 433 }, { 109, 681 }, { 110, 433 }, { 111, 433 },
 { 112, 433 }, { 113, 433 }, { 114, 433 }, { 115, 433 }, { 116, 433 },
 { 117, 433 }, { 118, 433 }, { 119, 433 }, { 120, 433 }, { 121, 433 },
 { 122, 433 }, { 123, 260 }, { 124, 260 }, { 125, 260 }, { 126, 260 },
 { 127, 260 }, { 128, 260 }, {   0,   0 }, {   0,3468 }, {   1, 130 },
 {   2, 130 }, {   3, 130 }, {   4, 130 }, {   5, 130 }, {   6, 130 },
 {   7, 130 }, {   8, 130 }, {   9, 132 }, {  10, 134 }, {  11, 130 },
 {  12, 130 }, {  13, 132 }, {  14, 130 }, {  15, 130 }, {  16, 130 },

 {  17, 130 }, {  18, 130 }, {  19, 130 }, {  20, 130 }, {  21, 130 },
 {  22, 130 }, {  23, 130 }, {  24, 130 }, {  25, 130 }, {  26, 130 },
 {  27, 130 }, {  28, 130 }, {  29, 130 }, {  30, 130 }, {  31, 130 },
 {  32, 132 }, {  33, 130 }, {  34, 130 }, {  35, 130 }, {  36, 130 },
 {  37, 130 }, {  38, 130 }, {  39, 130 }, {  40, 130 }, {  41, 130 },
 {  42, 130 }, {  43, 130 }, {  44, 130 }, {  45, 130 }, {  46, 137 },
 {  47, 153 }, {  48, 166 }, {  49, 242 }, {  50, 242 }, {  51, 242 },
 {  52, 242 }, {  53, 242 }, {  54, 242 }, {  55, 242 }, {  56, 242 },
 {  57, 242 }, {  58, 130 }, {  59, 155 }, {  60, 130 }, {  61, 130 },
 {  62, 130 }, {  63, 130 }, {  64, 130 }, {  65, 303 }, {  66, 303 },

 {  67, 303 }, {  68, 303 }, {  69, 303 }, {  70, 303 }, {  71, 303 },
 {  72, 303 }, {  73, 303 }, {  74, 303 }, {  75, 303 }, {  76, 303 },
 {  77, 303 }, {  78, 303 }, {  79, 303 }, {  80, 303 }, {  81, 303 },
 {  82, 303 }, {  83, 303 }, {  84, 303 }, {  85, 303 }, {  86, 303 },
 {  87, 303 }, {  88, 303 }, {  89, 303 }, {  90, 303 }, {  91, 130 },
 {  92, 130 }, {  93, 130 }, {  94, 130 }, {  95, 130 }, {  96, 130 },
 {  97, 303 }, {  98, 303 }, {  99, 303 }, { 100, 303 }, { 101, 303 },
 { 102, 303 }, { 103, 303 }, { 104, 303 }, { 105, 427 }, { 106, 303 },
 { 107, 303 }, { 108, 303 }, { 109, 551 }, { 110, 303 }, { 111, 303 },
 { 112, 303 }, { 113, 303 }, { 114, 303 }, { 115, 303 }, { 116, 303 },

 { 117, 303 }, { 118, 303 }, { 119, 303 }, { 120, 303 }, { 121, 303 },
 { 122, 303 }, { 123, 130 }, { 124, 130 }, { 125, 130 }, { 126, 130 },
 { 127, 130 }, { 128, 130 }, {   0,  14 }, {   0,3338 }, {   0,   4 },
 {   0,3336 }, {   0,  15 }, {   0,3334 }, {   0,   0 }, {   0,  14 },
 {   0,3331 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,  39 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  13,  39 }, {   9,  36 },
 {  10,  36 }, {   0,   0 }, {   0,   0 }, {  13,  36 }, {   0,   0 },
 {   0,  14 }, {   0,3315 }, {   0,   5 }, {   0,3313 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,  39 }, {   0,  14 }, {   0,3302 },

 {   0,   0 }, {   0,   0 }, {  32,  36 }, {   0,   4 }, {   0,3297 },
 {   0,  12 }, {   0,3295 }, {   0,   0 }, {   9,  12 }, {  10,  12 },
 {   0,  11 }, {   0,3290 }, {  13,  12 }, {   9,   0 }, {   0,   9 },
 {   0,3286 }, {   0,   0 }, {  13,   0 }, {  48, 538 }, {  49, 538 },
 {  50, 538 }, {  51, 538 }, {  52, 538 }, {  53, 538 }, {  54, 538 },
 {  55, 538 }, {  56, 538 }, {  57, 538 }, {  42, 626 }, {  59,  36 },
 {   0,   0 }, {  32,  12 }, {   0,   0 }, {  47, 756 }, {   0,   8 },
 {   0,3266 }, {  32,   0 }, {   0,   0 }, {  68, 540 }, {  69, 566 },
 {  70, 568 }, {   0,  13 }, {   0,3259 }, {   0,   2 }, {   0,3257 },
 {  46, 873 }, {   0,   0 }, {  48, 899 }, {  49, 899 }, {  50, 899 },

 {  51, 899 }, {  52, 899 }, {  53, 899 }, {  54, 899 }, {  55, 899 },
 {  56, 934 }, {  57, 934 }, {   0,   0 }, {  59,  12 }, {   0,  10 },
 {   0,3241 }, {   0,   6 }, {   0,3239 }, {   0,   7 }, {   0,3237 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69, 961 }, {   0,   0 },
 { 100, 540 }, { 101, 566 }, { 102, 568 }, {   0,   0 }, {   0,  14 },
 {   0,3226 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9, -60 },
 {  10, -60 }, {   0,   0 }, {  88, 971 }, {  13, -60 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 { 101, 961 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32, -60 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 120, 971 },
 {   0,   0 }, {  46, 797 }, {   0,   0 }, {  48, 957 }, {  49, 957 },
 {  50, 957 }, {  51, 957 }, {  52, 957 }, {  53, 957 }, {  54, 957 },
 {  55, 957 }, {  56, 957 }, {  57, 957 }, {   0,   0 }, {  59, -60 },
 {   0,  14 }, {   0,3165 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69, 885 },
 {   9,-101 }, {  10,-101 }, {   0,   0 }, {   0,   0 }, {  13,-101 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-101 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 101, 885 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 957 },
 {  49, 957 }, {  50, 957 }, {  51, 957 }, {  52, 957 }, {  53, 957 },
 {  54, 957 }, {  55, 957 }, {  56, 957 }, {  57, 957 }, {   0,   0 },
 {  59,-101 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  65, 957 }, {  66, 957 }, {  67, 957 }, {  68, 957 },
 {  69, 957 }, {  70, 957 }, {  71, 957 }, {  72, 957 }, {  73, 957 },
 {  74, 957 }, {  75, 957 }, {  76, 957 }, {  77, 957 }, {  78, 957 },
 {  79, 957 }, {  80, 957 }, {  81, 957 }, {  82, 957 }, {  83, 957 },
 {  84, 957 }, {  85, 957 }, {  86, 957 }, {  87, 957 }, {  88, 957 },
 {  89, 957 }, {  90, 957 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95, 957 }, {   0,   0 }, {  97, 957 }, {  98, 957 },
 {  99, 957 }, { 100, 957 }, { 101, 957 }, { 102, 957 }, { 103, 957 },
 { 104, 957 }, { 105, 957 }, { 106, 957 }, { 107, 957 }, { 108, 957 },
 { 109, 957 }, { 110, 957 }, { 111, 957 }, { 112, 957 }, { 113, 957 },

 { 114, 957 }, { 115, 957 }, { 116, 957 }, { 117, 957 }, { 118, 957 },
 { 119, 957 }, { 120, 957 }, { 121, 957 }, { 122, 957 }, {   0,  14 },
 {   0,3041 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,-225 },
 {  10,-225 }, {   0,   0 }, {   0,   0 }, {  13,-225 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,-225 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 833 }, {  49, 833 },
 {  50, 833 }, {  51, 833 }, {  52, 833 }, {  53, 833 }, {  54, 833 },
 {  55, 833 }, {  56, 833 }, {  57, 833 }, {   0,   0 }, {  59,-225 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, 833 }, {  66, 833 }, {  67, 833 }, {  68, 833 }, {  69, 833 },
 {  70, 833 }, {  71, 833 }, {  72, 833 }, {  73, 833 }, {  74, 833 },
 {  75, 833 }, {  76, 833 }, {  77, 833 }, {  78, 833 }, {  79, 833 },
 {  80, 833 }, {  81, 833 }, {  82, 833 }, {  83, 833 }, {  84, 833 },
 {  85, 833 }, {  86, 833 }, {  87, 833 }, {  88, 833 }, {  89, 833 },

 {  90, 833 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  95, 833 }, {   0,   0 }, {  97, 833 }, {  98, 833 }, {  99, 833 },
 { 100, 833 }, { 101, 833 }, { 102, 833 }, { 103, 833 }, { 104, 833 },
 { 105, 833 }, { 106, 833 }, { 107, 833 }, { 108, 833 }, { 109, 957 },
 { 110, 833 }, { 111, 833 }, { 112, 833 }, { 113, 833 }, { 114, 833 },
 { 115, 833 }, { 116, 833 }, { 117, 833 }, { 118, 833 }, { 119, 833 },
 { 120, 833 }, { 121, 833 }, { 122, 833 }, {   0,  14 }, {   0,2917 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,-349 }, {  10,-349 },
 {   0,   0 }, {   0,   0 }, {  13,-349 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,-349 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48, 709 }, {  49, 709 }, {  50, 709 },
 {  51, 709 }, {  52, 709 }, {  53, 709 }, {  54, 709 }, {  55, 709 },
 {  56, 709 }, {  57, 709 }, {   0,   0 }, {  59,-349 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 709 },

 {  66, 709 }, {  67, 709 }, {  68, 709 }, {  69, 709 }, {  70, 709 },
 {  71, 709 }, {  72, 709 }, {  73, 709 }, {  74, 709 }, {  75, 709 },
 {  76, 709 }, {  77, 709 }, {  78, 709 }, {  79, 709 }, {  80, 709 },
 {  81, 709 }, {  82, 709 }, {  83, 709 }, {  84, 709 }, {  85, 709 },
 {  86, 709 }, {  87, 709 }, {  88, 709 }, {  89, 709 }, {  90, 709 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95, 709 },
 {   0,   0 }, {  97, 709 }, {  98, 709 }, {  99, 709 }, { 100, 957 },
 { 101, 709 }, { 102, 709 }, { 103, 709 }, { 104, 709 }, { 105, 709 },
 { 106, 709 }, { 107, 709 }, { 108, 709 }, { 109, 709 }, { 110, 709 },
 { 111, 709 }, { 112, 709 }, { 113, 709 }, { 114, 709 }, { 115, 709 },

 { 116, 709 }, { 117, 709 }, { 118, 709 }, { 119, 709 }, { 120, 709 },
 { 121, 709 }, { 122, 709 }, {   0,   0 }, {   0,2793 }, {   0,   0 },
 {   0,2791 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   9,-502 }, {  10,-502 }, {   9,-468 },
 {  10,-468 }, {  13,-502 }, {   0,   0 }, {  13,-468 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,2765 }, {   0,   0 }, {   0,2763 }, {   0,   0 },
 {  32,-502 }, {   0,   0 }, {  32,-468 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   9,-532 }, {  10,-532 }, {   0,   0 },

 {   0,   0 }, {  13,-532 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {  59,-502 }, {   0,   0 }, {  59,-468 },
 {  32,-532 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  68,   2 }, {  69,  28 }, {  70,  30 }, {  43, 897 },
 {   0,   0 }, {  45, 897 }, {   0,   0 }, {   0,   0 }, {  48, 929 },
 {  49, 929 }, {  50, 929 }, {  51, 929 }, {  52, 929 }, {  53, 929 },
 {  54, 929 }, {  55, 929 }, {  56, 929 }, {  57, 929 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  59,-532 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 100,   2 }, { 101,  28 },
 { 102,  30 }, {   0,   3 }, {   0,2689 }, {   1, 957 }, {   2, 957 },
 {   3, 957 }, {   4, 957 }, {   5, 957 }, {   6, 957 }, {   7, 957 },
 {   8, 957 }, {   9, 957 }, {  10, 957 }, {  11, 957 }, {  12, 957 },
 {  13, 957 }, {  14, 957 }, {  15, 957 }, {  16, 957 }, {  17, 957 },
 {  18, 957 }, {  19, 957 }, {  20, 957 }, {  21, 957 }, {  22, 957 },
 {  23, 957 }, {  24, 957 }, {  25, 957 }, {  26, 957 }, {  27, 957 },
 {  28, 957 }, {  29, 957 }, {  30, 957 }, {  31, 957 }, {  32, 957 },
 {  33, 957 }, {  34, 957 }, {  35, 957 }, {  36, 957 }, {  37, 957 },

 {  38, 957 }, {  39, 957 }, {  40, 957 }, {  41, 957 }, {  42,1087 },
 {  43, 957 }, {  44, 957 }, {  45, 957 }, {  46, 957 }, {  47, 957 },
 {  48, 957 }, {  49, 957 }, {  50, 957 }, {  51, 957 }, {  52, 957 },
 {  53, 957 }, {  54, 957 }, {  55, 957 }, {  56, 957 }, {  57, 957 },
 {  58, 957 }, {  59, 957 }, {  60, 957 }, {  61, 957 }, {  62, 957 },
 {  63, 957 }, {  64, 957 }, {  65, 957 }, {  66, 957 }, {  67, 957 },
 {  68, 957 }, {  69, 957 }, {  70, 957 }, {  71, 957 }, {  72, 957 },
 {  73, 957 }, {  74, 957 }, {  75, 957 }, {  76, 957 }, {  77, 957 },
 {  78, 957 }, {  79, 957 }, {  80, 957 }, {  81, 957 }, {  82, 957 },
 {  83, 957 }, {  84, 957 }, {  85, 957 }, {  86, 957 }, {  87, 957 },

 {  88, 957 }, {  89, 957 }, {  90, 957 }, {  91, 957 }, {  92, 957 },
 {  93, 957 }, {  94, 957 }, {  95, 957 }, {  96, 957 }, {  97, 957 },
 {  98, 957 }, {  99, 957 }, { 100, 957 }, { 101, 957 }, { 102, 957 },
 { 103, 957 }, { 104, 957 }, { 105, 957 }, { 106, 957 }, { 107, 957 },
 { 108, 957 }, { 109, 957 }, { 110, 957 }, { 111, 957 }, { 112, 957 },
 { 113, 957 }, { 114, 957 }, { 115, 957 }, { 116, 957 }, { 117, 957 },
 { 118, 957 }, { 119, 957 }, { 120, 957 }, { 121, 957 }, { 122, 957 },
 { 123, 957 }, { 124, 957 }, { 125, 957 }, { 126, 957 }, { 127, 957 },
 { 128, 957 }, {   0,   1 }, {   0,2559 }, {   1,1087 }, {   2,1087 },
 {   3,1087 }, {   4,1087 }, {   5,1087 }, {   6,1087 }, {   7,1087 },

 {   8,1087 }, {   9,1087 }, {   0,   0 }, {  11,1087 }, {  12,1087 },
 {  13,1087 }, {  14,1087 }, {  15,1087 }, {  16,1087 }, {  17,1087 },
 {  18,1087 }, {  19,1087 }, {  20,1087 }, {  21,1087 }, {  22,1087 },
 {  23,1087 }, {  24,1087 }, {  25,1087 }, {  26,1087 }, {  27,1087 },
 {  28,1087 }, {  29,1087 }, {  30,1087 }, {  31,1087 }, {  32,1087 },
 {  33,1087 }, {  34,1087 }, {  35,1087 }, {  36,1087 }, {  37,1087 },
 {  38,1087 }, {  39,1087 }, {  40,1087 }, {  41,1087 }, {  42,1087 },
 {  43,1087 }, {  44,1087 }, {  45,1087 }, {  46,1087 }, {  47,1087 },
 {  48,1087 }, {  49,1087 }, {  50,1087 }, {  51,1087 }, {  52,1087 },
 {  53,1087 }, {  54,1087 }, {  55,1087 }, {  56,1087 }, {  57,1087 },

 {  58,1087 }, {  59,1087 }, {  60,1087 }, {  61,1087 }, {  62,1087 },
 {  63,1087 }, {  64,1087 }, {  65,1087 }, {  66,1087 }, {  67,1087 },
 {  68,1087 }, {  69,1087 }, {  70,1087 }, {  71,1087 }, {  72,1087 },
 {  73,1087 }, {  74,1087 }, {  75,1087 }, {  76,1087 }, {  77,1087 },
 {  78,1087 }, {  79,1087 }, {  80,1087 }, {  81,1087 }, {  82,1087 },
 {  83,1087 }, {  84,1087 }, {  85,1087 }, {  86,1087 }, {  87,1087 },
 {  88,1087 }, {  89,1087 }, {  90,1087 }, {  91,1087 }, {  92,1087 },
 {  93,1087 }, {  94,1087 }, {  95,1087 }, {  96,1087 }, {  97,1087 },
 {  98,1087 }, {  99,1087 }, { 100,1087 }, { 101,1087 }, { 102,1087 },
 { 103,1087 }, { 104,1087 }, { 105,1087 }, { 106,1087 }, { 107,1087 },

 { 108,1087 }, { 109,1087 }, { 110,1087 }, { 111,1087 }, { 112,1087 },
 { 113,1087 }, { 114,1087 }, { 115,1087 }, { 116,1087 }, { 117,1087 },
 { 118,1087 }, { 119,1087 }, { 120,1087 }, { 121,1087 }, { 122,1087 },
 { 123,1087 }, { 124,1087 }, { 125,1087 }, { 126,1087 }, { 127,1087 },
 { 128,1087 }, {   0,   0 }, {   0,2429 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9,-866 }, {  10,-866 }, {   0,   0 }, {   0,   0 },
 {  13,-866 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,2403 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-866 },
 {   0,   0 }, {   0,   0 }, {   9,-887 }, {  10,-887 }, {   0,   0 },
 {   0,   0 }, {  13,-887 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,-364 }, {  49,-364 }, {  50,-364 }, {  51,-364 }, {  52,-364 },
 {  53,-364 }, {  54,-364 }, {  55,-364 }, {  56,-364 }, {  57,-364 },
 {  32,-887 }, {  59,-866 }, {   0,   0 }, {   0,2368 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  68,-362 }, {  69,-336 }, {  70,-334 }, {   0,   0 }, {  46, -26 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },

 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,  35 },
 {  57,  35 }, {   0,   0 }, {  59,-887 }, {   0,   0 }, {   0,   0 },
 {   0,2341 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  69,  62 }, {   0,   0 }, {   0,   0 },
 {   0,2331 }, {   0,   0 }, { 100,-362 }, { 101,-336 }, { 102,-334 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46, -61 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101,  62 },

 {   0,   0 }, {   0,   0 }, {  69,  27 }, {  43, 999 }, {   0,   0 },
 {  45, 999 }, {   0,   0 }, {   0,   0 }, {  48,1009 }, {  49,1009 },
 {  50,1009 }, {  51,1009 }, {  52,1009 }, {  53,1009 }, {  54,1009 },
 {  55,1009 }, {  56,1009 }, {  57,1009 }, {  48,1061 }, {  49,1061 },
 {  50,1061 }, {  51,1061 }, {  52,1061 }, {  53,1061 }, {  54,1061 },
 {  55,1061 }, {  56,1061 }, {  57,1061 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,2269 }, {   0,   0 }, { 101,  27 },
 {  65,1061 }, {  66,1061 }, {  67,1061 }, {  68,1061 }, {  69,1061 },
 {  70,1061 }, {   9,-1017 }, {  10,-1017 }, {   0,   0 }, {   0,   0 },
 {  13,-1017 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-1017 },
 {   0,   0 }, {   0,   0 }, {  97,1061 }, {  98,1061 }, {  99,1061 },
 { 100,1061 }, { 101,1061 }, { 102,1061 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46,-160 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {  59,-1017 }, {   0,   0 }, {   0,2208 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  69, -72 }, {   9,-1058 }, {  10,-1058 }, {   0,   0 },
 {   0,   0 }, {  13,-1058 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,-1058 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101, -72 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },

 {  57,   0 }, {   0,   0 }, {  59,-1058 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,   0 }, {   0,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },

 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, {   0,   0 }, {   0,2084 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9,-1182 }, {  10,-1182 }, {   0,   0 }, {   0,   0 },
 {  13,-1182 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-1182 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,-124 }, {  49,-124 }, {  50,-124 }, {  51,-124 }, {  52,-124 },
 {  53,-124 }, {  54,-124 }, {  55,-124 }, {  56,-124 }, {  57,-124 },
 {   0,   0 }, {  59,-1182 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-124 }, {  66,-124 }, {  67,-124 },
 {  68,-124 }, {  69,-124 }, {  70,-124 }, {  71,-124 }, {  72,-124 },
 {  73,-124 }, {  74,-124 }, {  75,-124 }, {  76,-124 }, {  77,-124 },
 {  78,-124 }, {  79,-124 }, {  80,-124 }, {  81,-124 }, {  82,-124 },

 {  83,-124 }, {  84,-124 }, {  85,-124 }, {  86,-124 }, {  87,-124 },
 {  88,-124 }, {  89,-124 }, {  90,-124 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95,-124 }, {   0,   0 }, {  97,-124 },
 {  98,-124 }, {  99,-124 }, { 100,-124 }, { 101,-124 }, { 102,-124 },
 { 103,-124 }, { 104,-124 }, { 105,-124 }, { 106,-124 }, { 107,-124 },
 { 108,-124 }, { 109,-124 }, { 110,-124 }, { 111,-124 }, { 112, 876 },
 { 113,-124 }, { 114,-124 }, { 115,-124 }, { 116,-124 }, { 117,-124 },
 { 118,-124 }, { 119,-124 }, { 120,-124 }, { 121,-124 }, { 122,-124 },
 {   0,   0 }, {   0,1960 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   9,-1306 }, {  10,-1306 }, {   0,   0 }, {   0,   0 }, {  13,-1306 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-1306 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-248 },
 {  49,-248 }, {  50,-248 }, {  51,-248 }, {  52,-248 }, {  53,-248 },
 {  54,-248 }, {  55,-248 }, {  56,-248 }, {  57,-248 }, {   0,   0 },

 {  59,-1306 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-248 }, {  66,-248 }, {  67,-248 }, {  68,-248 },
 {  69,-248 }, {  70,-248 }, {  71,-248 }, {  72,-248 }, {  73,-248 },
 {  74,-248 }, {  75,-248 }, {  76,-248 }, {  77,-248 }, {  78,-248 },
 {  79,-248 }, {  80,-248 }, {  81,-248 }, {  82,-248 }, {  83,-248 },
 {  84,-248 }, {  85,-248 }, {  86,-248 }, {  87,-248 }, {  88,-248 },
 {  89,-248 }, {  90,-248 }, {   0,   0 }, {   0,1868 }, {   0,   0 },
 {   0,   0 }, {  95,-248 }, {   0,   0 }, {  97,-248 }, {  98,-248 },
 {  99,-248 }, { 100,-248 }, { 101,-248 }, { 102,-248 }, { 103,-248 },
 { 104,-248 }, { 105,-248 }, { 106,-248 }, { 107,-248 }, { 108, 876 },

 { 109,-248 }, { 110,-248 }, { 111,-248 }, { 112,-248 }, { 113,-248 },
 { 114,-248 }, { 115,-248 }, { 116,-248 }, { 117,-248 }, { 118,-248 },
 { 119,-248 }, { 120,-248 }, { 121,-248 }, { 122,-248 }, {   0,   0 },
 {   0,1836 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,-1459 },
 {  10,-1459 }, {   0,   0 }, {   0,   0 }, {  13,-1459 }, {   0,   0 },
 {   0,   0 }, {  48,  32 }, {  49,  32 }, {  50,  32 }, {  51,  32 },
 {  52,  32 }, {  53,  32 }, {  54,  32 }, {  55,  32 }, {  56,  32 },
 {  57,  32 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,-1459 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 876 }, {  49, 876 },
 {  50, 876 }, {  51, 876 }, {  52, 876 }, {  53, 876 }, {  54, 876 },
 {  55, 876 }, {  56, 876 }, {  57, 876 }, {   0,   0 }, {  59,-1459 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  68,-955 }, {   0,   0 },
 {  70,-927 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 100,-955 }, {   0,   0 }, { 102,-927 }, {   0,   0 }, {   0,1732 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },

 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42, 130 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },

 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,   0 }, {   0,1602 },

 {   1, 746 }, {   2, 746 }, {   3, 746 }, {   4, 746 }, {   5, 746 },
 {   6, 746 }, {   7, 746 }, {   8, 746 }, {   9, 746 }, {  10, 746 },
 {  11, 746 }, {  12, 746 }, {  13, 746 }, {  14, 746 }, {  15, 746 },
 {  16, 746 }, {  17, 746 }, {  18, 746 }, {  19, 746 }, {  20, 746 },
 {  21, 746 }, {  22, 746 }, {  23, 746 }, {  24, 746 }, {  25, 746 },
 {  26, 746 }, {  27, 746 }, {  28, 746 }, {  29, 746 }, {  30, 746 },
 {  31, 746 }, {  32, 746 }, {  33, 746 }, {  34, 746 }, {  35, 746 },
 {  36, 746 }, {  37, 746 }, {  38, 746 }, {  39, 746 }, {  40, 746 },
 {  41, 746 }, {  42,   0 }, {  43, 746 }, {  44, 746 }, {  45, 746 },
 {  46, 746 }, {  47,-1655 }, {  48, 746 }, {  49, 746 }, {  50, 746 },

 {  51, 746 }, {  52, 746 }, {  53, 746 }, {  54, 746 }, {  55, 746 },
 {  56, 746 }, {  57, 746 }, {  58, 746 }, {  59, 746 }, {  60, 746 },
 {  61, 746 }, {  62, 746 }, {  63, 746 }, {  64, 746 }, {  65, 746 },
 {  66, 746 }, {  67, 746 }, {  68, 746 }, {  69, 746 }, {  70, 746 },
 {  71, 746 }, {  72, 746 }, {  73, 746 }, {  74, 746 }, {  75, 746 },
 {  76, 746 }, {  77, 746 }, {  78, 746 }, {  79, 746 }, {  80, 746 },
 {  81, 746 }, {  82, 746 }, {  83, 746 }, {  84, 746 }, {  85, 746 },
 {  86, 746 }, {  87, 746 }, {  88, 746 }, {  89, 746 }, {  90, 746 },
 {  91, 746 }, {  92, 746 }, {  93, 746 }, {  94, 746 }, {  95, 746 },
 {  96, 746 }, {  97, 746 }, {  98, 746 }, {  99, 746 }, { 100, 746 },

 { 101, 746 }, { 102, 746 }, { 103, 746 }, { 104, 746 }, { 105, 746 },
 { 106, 746 }, { 107, 746 }, { 108, 746 }, { 109, 746 }, { 110, 746 },
 { 111, 746 }, { 112, 746 }, { 113, 746 }, { 114, 746 }, { 115, 746 },
 { 116, 746 }, { 117, 746 }, { 118, 746 }, { 119, 746 }, { 120, 746 },
 { 121, 746 }, { 122, 746 }, { 123, 746 }, { 124, 746 }, { 125, 746 },
 { 126, 746 }, { 127, 746 }, { 128, 746 }, {   0,   1 }, {   0,1472 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {   0,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },

 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },

 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },

 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,   0 }, {   0,1342 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,1332 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,-1963 }, {  10,-1963 },
 {   0,   0 }, {   0,   0 }, {  13,-1963 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  32,-1963 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,  10 }, {  49,  10 }, {  50,  10 },
 {  51,  10 }, {  52,  10 }, {  53,  10 }, {  54,  10 }, {  55,  10 },
 {  56,  10 }, {  57,  10 }, {  48, 606 }, {  49, 606 }, {  50, 606 },
 {  51, 606 }, {  52, 606 }, {  53, 606 }, {  54, 606 }, {  55, 606 },
 {  56, 606 }, {  57, 606 }, {   0,   0 }, {  59,-1963 }, {   0,   0 },
 {   0,   0 }, {   0,1270 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  68,-1459 }, {   0,   0 }, {  70,-1431 },
 {   9,-1971 }, {  10,-1971 }, {   0,   0 }, {   0,   0 }, {  13,-1971 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-1971 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 100,-1459 },
 {   0,   0 }, { 102,-1431 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 570 },
 {  49, 570 }, {  50, 570 }, {  51, 570 }, {  52, 570 }, {  53, 570 },
 {  54, 570 }, {  55, 570 }, {  56, 570 }, {  57, 570 }, {   0,   0 },
 {  59,-1971 }, {   0,   0 }, {   0,   0 }, {   0,1208 }, {   0,   0 },
 {   0,   0 }, {  65, 570 }, {  66, 570 }, {  67, 570 }, {  68, 570 },

 {  69, 570 }, {  70, 570 }, {   9,-2058 }, {  10,-2058 }, {   0,   0 },
 {   0,   0 }, {  13,-2058 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,-2058 }, {   0,   0 }, {   0,   0 }, {  97, 570 }, {  98, 570 },
 {  99, 570 }, { 100, 570 }, { 101, 570 }, { 102, 570 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-1000 }, {  49,-1000 }, {  50,-1000 }, {  51,-1000 },
 {  52,-1000 }, {  53,-1000 }, {  54,-1000 }, {  55,-1000 }, {  56,-1000 },

 {  57,-1000 }, {   0,   0 }, {  59,-2058 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1000 }, {  66,-1000 },
 {  67,-1000 }, {  68,-1000 }, {  69,-1000 }, {  70,-1000 }, {  71,-1000 },
 {  72,-1000 }, {  73,-1000 }, {  74,-1000 }, {  75,-1000 }, {  76,-1000 },
 {  77,-1000 }, {  78,-1000 }, {  79,-1000 }, {  80,-1000 }, {  81,-1000 },
 {  82,-1000 }, {  83,-1000 }, {  84,-1000 }, {  85,-1000 }, {  86,-1000 },
 {  87,-1000 }, {  88,-1000 }, {  89,-1000 }, {  90,-1000 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-1000 }, {   0,   0 },
 {  97,-1000 }, {  98,-1000 }, {  99,-1000 }, { 100,-1000 }, { 101,-1000 },
 { 102,-1000 }, { 103,-1000 }, { 104,-1000 }, { 105,-1000 }, { 106,-1000 },

 { 107,-1000 }, { 108,-1000 }, { 109,-1000 }, { 110,-1000 }, { 111, 570 },
 { 112,-1000 }, { 113,-1000 }, { 114,-1000 }, { 115,-1000 }, { 116,-1000 },
 { 117,-1000 }, { 118,-1000 }, { 119,-1000 }, { 120,-1000 }, { 121,-1000 },
 { 122,-1000 }, {   0,   0 }, {   0,1084 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9,-2155 }, {  10,-2155 }, {   0,   0 }, {   0,   0 },
 {  13,-2155 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-2155 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,-1124 }, {  49,-1124 }, {  50,-1124 }, {  51,-1124 }, {  52,-1124 },
 {  53,-1124 }, {  54,-1124 }, {  55,-1124 }, {  56,-1124 }, {  57,-1124 },
 {   0,   0 }, {  59,-2155 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-1124 }, {  66,-1124 }, {  67,-1124 },
 {  68,-1124 }, {  69,-1124 }, {  70,-1124 }, {  71,-1124 }, {  72,-1124 },
 {  73,-1124 }, {  74,-1124 }, {  75,-1124 }, {  76,-1124 }, {  77,-1124 },
 {  78,-1124 }, {  79,-1124 }, {  80,-1124 }, {  81,-1124 }, {  82,-1124 },

 {  83,-1124 }, {  84,-1124 }, {  85,-1124 }, {  86,-1124 }, {  87,-1124 },
 {  88,-1124 }, {  89,-1124 }, {  90,-1124 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95,-1124 }, {   0,   0 }, {  97,-1124 },
 {  98,-1124 }, {  99,-1124 }, { 100,-1124 }, { 101,-1124 }, { 102,-1124 },
 { 103,-1124 }, { 104,-1124 }, { 105,-1124 }, { 106,-1124 }, { 107,-1124 },
 { 108,-1124 }, { 109,-1124 }, { 110,-1124 }, { 111,-1124 }, { 112,-1124 },
 { 113,-1124 }, { 114,-1124 }, { 115,-1124 }, { 116,-1124 }, { 117,-1124 },
 { 118,-1124 }, { 119,-1124 }, { 120,-1124 }, { 121,-1124 }, { 122,-1124 },
 {   0,   0 }, {   0, 960 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   9,-2335 }, {  10,-2335 }, {   0,   0 }, {   0,   0 }, {  13,-2335 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-2335 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },

 {  59,-2335 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  68,-1831 },
 {   0,   0 }, {  70,-1803 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 100,-1831 }, {   0,   0 }, { 102,-1803 }, {   0,   0 },
 {   0, 856 }, {   1, 342 }, {   2, 342 }, {   3, 342 }, {   4, 342 },

 {   5, 342 }, {   6, 342 }, {   7, 342 }, {   8, 342 }, {   9, 342 },
 {  10, 342 }, {  11, 342 }, {  12, 342 }, {  13, 342 }, {  14, 342 },
 {  15, 342 }, {  16, 342 }, {  17, 342 }, {  18, 342 }, {  19, 342 },
 {  20, 342 }, {  21, 342 }, {  22, 342 }, {  23, 342 }, {  24, 342 },
 {  25, 342 }, {  26, 342 }, {  27, 342 }, {  28, 342 }, {  29, 342 },
 {  30, 342 }, {  31, 342 }, {  32, 342 }, {  33, 342 }, {  34, 342 },
 {  35, 342 }, {  36, 342 }, {  37, 342 }, {  38, 342 }, {  39, 342 },
 {  40, 342 }, {  41, 342 }, {  42, 472 }, {  43, 342 }, {  44, 342 },
 {  45, 342 }, {  46, 342 }, {  47, 342 }, {  48, 342 }, {  49, 342 },
 {  50, 342 }, {  51, 342 }, {  52, 342 }, {  53, 342 }, {  54, 342 },

 {  55, 342 }, {  56, 342 }, {  57, 342 }, {  58, 342 }, {  59, 342 },
 {  60, 342 }, {  61, 342 }, {  62, 342 }, {  63, 342 }, {  64, 342 },
 {  65, 342 }, {  66, 342 }, {  67, 342 }, {  68, 342 }, {  69, 342 },
 {  70, 342 }, {  71, 342 }, {  72, 342 }, {  73, 342 }, {  74, 342 },
 {  75, 342 }, {  76, 342 }, {  77, 342 }, {  78, 342 }, {  79, 342 },
 {  80, 342 }, {  81, 342 }, {  82, 342 }, {  83, 342 }, {  84, 342 },
 {  85, 342 }, {  86, 342 }, {  87, 342 }, {  88, 342 }, {  89, 342 },
 {  90, 342 }, {  91, 342 }, {  92, 342 }, {  93, 342 }, {  94, 342 },
 {  95, 342 }, {  96, 342 }, {  97, 342 }, {  98, 342 }, {  99, 342 },
 { 100, 342 }, { 101, 342 }, { 102, 342 }, { 103, 342 }, { 104, 342 },

 { 105, 342 }, { 106, 342 }, { 107, 342 }, { 108, 342 }, { 109, 342 },
 { 110, 342 }, { 111, 342 }, { 112, 342 }, { 113, 342 }, { 114, 342 },
 { 115, 342 }, { 116, 342 }, { 117, 342 }, { 118, 342 }, { 119, 342 },
 { 120, 342 }, { 121, 342 }, { 122, 342 }, { 123, 342 }, { 124, 342 },
 { 125, 342 }, { 126, 342 }, { 127, 342 }, { 128, 342 }, {   0,   0 },
 {   0, 726 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,-2569 },
 {  10,-2569 }, {   0,   0 }, {   0,   0 }, {  13,-2569 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0, 700 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,-2569 }, {   0,   0 }, {   0,   0 },
 {   9,-2541 }, {  10,-2541 }, {   0,   0 }, {   0,   0 }, {  13,-2541 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  32,-2541 }, {  59,-2569 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  68,-2065 }, {   0,   0 },
 {  70,-2037 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },

 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {  59,-2541 }, {   0,   0 }, {   0,   0 }, {   0, 638 }, {   0,   0 },
 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {   9,-2628 }, {  10,-2628 }, {   0,   0 },
 { 100,-2065 }, {  13,-2628 }, { 102,-2037 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,-2628 }, {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },

 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-1570 }, {  49,-1570 }, {  50,-1570 }, {  51,-1570 },
 {  52,-1570 }, {  53,-1570 }, {  54,-1570 }, {  55,-1570 }, {  56,-1570 },
 {  57,-1570 }, {   0,   0 }, {  59,-2628 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-1570 }, {  66,-1570 },
 {  67,-1570 }, {  68,-1570 }, {  69,-1570 }, {  70,-1570 }, {  71,-1570 },
 {  72,-1570 }, {  73,-1570 }, {  74,-1570 }, {  75,-1570 }, {  76,-1570 },
 {  77,-1570 }, {  78,-1570 }, {  79,-1570 }, {  80,-1570 }, {  81,-1570 },
 {  82,-1570 }, {  83,-1570 }, {  84,-1570 }, {  85,-1570 }, {  86,-1570 },

 {  87,-1570 }, {  88,-1570 }, {  89,-1570 }, {  90,-1570 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-1570 }, {   0,   0 },
 {  97,-1570 }, {  98,-1570 }, {  99,-1570 }, { 100,-1570 }, { 101,-1570 },
 { 102,-1570 }, { 103,-1570 }, { 104,-1570 }, { 105,-1570 }, { 106,-1570 },
 { 107,-1570 }, { 108,-1570 }, { 109,-1570 }, { 110,-1570 }, { 111,-1570 },
 { 112,-1570 }, { 113,-1570 }, { 114, 384 }, { 115,-1570 }, { 116,-1570 },
 { 117,-1570 }, { 118,-1570 }, { 119,-1570 }, { 120,-1570 }, { 121,-1570 },
 { 122,-1570 }, {   0,   0 }, {   0, 514 }, {   1,   0 }, {   2,   0 },
 {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 },

 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42, 130 },
 {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 },

 {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },
 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 },
 {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 },
 {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 },
 {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 },
 {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 },
 {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 },
 { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 },

 { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 },
 { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 },
 { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 },
 { 128,   0 }, {   0,   0 }, {   0, 384 }, {   1,-472 }, {   2,-472 },
 {   3,-472 }, {   4,-472 }, {   5,-472 }, {   6,-472 }, {   7,-472 },
 {   8,-472 }, {   9,-472 }, {  10,-472 }, {  11,-472 }, {  12,-472 },
 {  13,-472 }, {  14,-472 }, {  15,-472 }, {  16,-472 }, {  17,-472 },
 {  18,-472 }, {  19,-472 }, {  20,-472 }, {  21,-472 }, {  22,-472 },
 {  23,-472 }, {  24,-472 }, {  25,-472 }, {  26,-472 }, {  27,-472 },
 {  28,-472 }, {  29,-472 }, {  30,-472 }, {  31,-472 }, {  32,-472 },

 {  33,-472 }, {  34,-472 }, {  35,-472 }, {  36,-472 }, {  37,-472 },
 {  38,-472 }, {  39,-472 }, {  40,-472 }, {  41,-472 }, {  42,   0 },
 {  43,-472 }, {  44,-472 }, {  45,-472 }, {  46,-472 }, {  47,-2873 },
 {  48,-472 }, {  49,-472 }, {  50,-472 }, {  51,-472 }, {  52,-472 },
 {  53,-472 }, {  54,-472 }, {  55,-472 }, {  56,-472 }, {  57,-472 },
 {  58,-472 }, {  59,-472 }, {  60,-472 }, {  61,-472 }, {  62,-472 },
 {  63,-472 }, {  64,-472 }, {  65,-472 }, {  66,-472 }, {  67,-472 },
 {  68,-472 }, {  69,-472 }, {  70,-472 }, {  71,-472 }, {  72,-472 },
 {  73,-472 }, {  74,-472 }, {  75,-472 }, {  76,-472 }, {  77,-472 },
 {  78,-472 }, {  79,-472 }, {  80,-472 }, {  81,-472 }, {  82,-472 },

 {  83,-472 }, {  84,-472 }, {  85,-472 }, {  86,-472 }, {  87,-472 },
 {  88,-472 }, {  89,-472 }, {  90,-472 }, {  91,-472 }, {  92,-472 },
 {  93,-472 }, {  94,-472 }, {  95,-472 }, {  96,-472 }, {  97,-472 },
 {  98,-472 }, {  99,-472 }, { 100,-472 }, { 101,-472 }, { 102,-472 },
 { 103,-472 }, { 104,-472 }, { 105,-472 }, { 106,-472 }, { 107,-472 },
 { 108,-472 }, { 109,-472 }, { 110,-472 }, { 111,-472 }, { 112,-472 },
 { 113,-472 }, { 114,-472 }, { 115,-472 }, { 116,-472 }, { 117,-472 },
 { 118,-472 }, { 119,-472 }, { 120,-472 }, { 121,-472 }, { 122,-472 },
 { 123,-472 }, { 124,-472 }, { 125,-472 }, { 126,-472 }, { 127,-472 },
 { 128,-472 }, {   0,   0 }, {   0, 254 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9,-3012 }, {  10,-3012 }, {   0,   0 }, {   0,   0 },
 {  13,-3012 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-3012 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,-1954 }, {  49,-1954 }, {  50,-1954 }, {  51,-1954 }, {  52,-1954 },

 {  53,-1954 }, {  54,-1954 }, {  55,-1954 }, {  56,-1954 }, {  57,-1954 },
 {   0,   0 }, {  59,-3012 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-1954 }, {  66,-1954 }, {  67,-1954 },
 {  68,-1954 }, {  69,-1954 }, {  70,-1954 }, {  71,-1954 }, {  72,-1954 },
 {  73,-1954 }, {  74,-1954 }, {  75,-1954 }, {  76,-1954 }, {  77,-1954 },
 {  78,-1954 }, {  79,-1954 }, {  80,-1954 }, {  81,-1954 }, {  82,-1954 },
 {  83,-1954 }, {  84,-1954 }, {  85,-1954 }, {  86,-1954 }, {  87,-1954 },
 {  88,-1954 }, {  89,-1954 }, {  90,-1954 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95,-1954 }, {   0,   0 }, {  97,-1954 },
 {  98,-1954 }, {  99,-1954 }, { 100,-1954 }, { 101,-1954 }, { 102,-1954 },

 { 103,-1954 }, { 104,-1954 }, { 105,-1954 }, { 106,-1954 }, { 107,-1954 },
 { 108,-1954 }, { 109,-1954 }, { 110,-1954 }, { 111,-1954 }, { 112,-1954 },
 { 113,-1954 }, { 114,-1954 }, { 115,-1954 }, { 116, 124 }, { 117,-1954 },
 { 118,-1954 }, { 119,-1954 }, { 120,-1954 }, { 121,-1954 }, { 122,-1954 },
 {   0,   0 }, {   0, 130 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   9,-3107 }, {  10,-3107 }, {   0,   0 }, {   0,   0 }, {  13,-3107 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-3107 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-2078 },
 {  49,-2078 }, {  50,-2078 }, {  51,-2078 }, {  52,-2078 }, {  53,-2078 },
 {  54,-2078 }, {  55,-2078 }, {  56,-2078 }, {  57,-2078 }, {   0,   0 },
 {  59,-3107 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-2078 }, {  66,-2078 }, {  67,-2078 }, {  68,-2078 },
 {  69,-2078 }, {  70,-2078 }, {  71,-2078 }, {  72,-2078 }, {  73,-2078 },
 {  74,-2078 }, {  75,-2078 }, {  76,-2078 }, {  77,-2078 }, {  78,-2078 },

 {  79,-2078 }, {  80,-2078 }, {  81,-2078 }, {  82,-2078 }, {  83,-2078 },
 {  84,-2078 }, {  85,-2078 }, {  86,-2078 }, {  87,-2078 }, {  88,-2078 },
 {  89,-2078 }, {  90,-2078 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95,-2078 }, {   0,   0 }, {  97,-2078 }, {  98,-2078 },
 {  99,-2078 }, { 100,-2078 }, { 101,-2078 }, { 102,-2078 }, { 103,-2078 },
 { 104,-2078 }, { 105,-2078 }, { 106,-2078 }, { 107,-2078 }, { 108,-2078 },
 { 109,-2078 }, { 110,-2078 }, { 111,-2078 }, { 112,-2078 }, { 113,-2078 },
 { 114,-2078 }, { 115,-2078 }, { 116,-2078 }, { 117,-2078 }, { 118,-2078 },
 { 119,-2078 }, { 120,-2078 }, { 121,-2078 }, { 122,-2078 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 { 129,  16 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[133],

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[16] =
    {   0,
0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "mdl/MDLScanner.l"
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1
/* Ignore whitespace */
/* keywords */
/* Identifiers */
/* Literal values */
/* //https://westes.github.io/flex/manual/Patterns.html#Patterns */
#line 1198 "mdl/MDLScanner.inl"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int mdl_lllex_init (yyscan_t* scanner);

int mdl_lllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int mdl_lllex_destroy (yyscan_t yyscanner );

int mdl_llget_debug (yyscan_t yyscanner );

void mdl_llset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE mdl_llget_extra (yyscan_t yyscanner );

void mdl_llset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *mdl_llget_in (yyscan_t yyscanner );

void mdl_llset_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *mdl_llget_out (yyscan_t yyscanner );

void mdl_llset_out  (FILE * _out_str ,yyscan_t yyscanner );

			int mdl_llget_leng (yyscan_t yyscanner );

char *mdl_llget_text (yyscan_t yyscanner );

int mdl_llget_lineno (yyscan_t yyscanner );

void mdl_llset_lineno (int _line_number ,yyscan_t yyscanner );

int mdl_llget_column  (yyscan_t yyscanner );

void mdl_llset_column (int _column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mdl_llwrap (yyscan_t yyscanner );
#else
extern int mdl_llwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = (int) read( fileno(yyin), buf, (yy_size_t) max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int mdl_lllex (yyscan_t yyscanner);

#define YY_DECL int mdl_lllex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			mdl_llensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				mdl_ll_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		mdl_ll_load_buffer_state(yyscanner );
		}

	{
#line 39 "mdl/MDLScanner.l"

    
#line 1444 "mdl/MDLScanner.inl"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		yyconst struct yy_trans_info *yy_trans_info;

		YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 41 "mdl/MDLScanner.l"
{
    /* Single line comment */
    My_Test(yytext, yyleng);
    }  
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 46 "mdl/MDLScanner.l"
{
    /* Multiline comment */
    My_Test(yytext, yyleng);
    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 51 "mdl/MDLScanner.l"
{ 
    My_Test(yytext, yyleng); 
    YY_FATAL_ERROR("Unterminated comment");
    }
	YY_BREAK
/* Ignore whitespace */
case 4:
YY_RULE_SETUP
#line 57 "mdl/MDLScanner.l"
{ 
    My_Test(yytext, yyleng); 
    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "mdl/MDLScanner.l"
{
    return ';';
    }
	YY_BREAK
/* keywords */
case 6:
/* rule 6 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 66 "mdl/MDLScanner.l"
{ 
    return YYTOKEN_MDL; 
    }
	YY_BREAK
case 7:
/* rule 7 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 70 "mdl/MDLScanner.l"
{ 
    return YYTOKEN_IMPORT; 
    }
	YY_BREAK
/* Identifiers */
case 8:
/* rule 8 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 75 "mdl/MDLScanner.l"
{
    lvalp->_IDENT = MDLFrontend_HashIdentName(yyextra, yytext);
    return YYTOKEN_IDENT;
    }
	YY_BREAK
/* Literal values */
case 9:
/* rule 9 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 81 "mdl/MDLScanner.l"
{ 
    char *endptr = NULL;
    lvalp->_INTEGER_LITERAL = strtol(yytext, &endptr, 10);
    assert(endptr <= ((yytext) + (yyleng)));
    return YYTOKEN_INTEGER_LITERAL; 
    }
	YY_BREAK
case 10:
/* rule 10 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 88 "mdl/MDLScanner.l"
{ 
    char *endptr = NULL;
    lvalp->_INTEGER_LITERAL = strtol(yytext, &endptr, 16);
    assert(endptr <= ((yytext) + (yyleng)));
    return YYTOKEN_INTEGER_LITERAL; 
    } 
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 95 "mdl/MDLScanner.l"
{ 
    char *endptr = NULL;
    lvalp->_INTEGER_LITERAL = strtol(yytext, &endptr, 8);
    assert(endptr <= ((yytext) + (yyleng)));
    return YYTOKEN_INTEGER_LITERAL; 
    }     
	YY_BREAK
case 12:
/* rule 12 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 102 "mdl/MDLScanner.l"
{
    char *endptr = NULL;
    lvalp->_FLOATING_LITERAL = strtof(yytext, &endptr);
    assert(endptr <= ((yytext) + (yyleng)));
    return YYTOKEN_FLOATING_LITERAL;
    }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 108 "mdl/MDLScanner.l"
{
    char *endptr = NULL;
    lvalp->_FLOATING_LITERAL = strtod(yytext, &endptr);
    assert(endptr <= ((yytext) + (yyleng)));
    return YYTOKEN_FLOATING_LITERAL;
    }    
	YY_BREAK
/* catch-all rule for any other single characters */
case 14:
YY_RULE_SETUP
#line 116 "mdl/MDLScanner.l"
{ 
        char msg_fatal_error[4096];
        sprintf(msg_fatal_error, "Unexpect \'%c\' at line %d column %d", ((yytext)[0]), (yylineno), (yycolumn));
        YY_FATAL_ERROR(msg_fatal_error);
    }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 122 "mdl/MDLScanner.l"
ECHO;
	YY_BREAK
#line 1678 "mdl/MDLScanner.inl"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * mdl_lllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( mdl_llwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of mdl_lllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mdl_llrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mdl_llrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mdl_llrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	int yy_c = 128;
	yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mdl_llrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mdl_llwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void mdl_llrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        mdl_llensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            mdl_ll_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	mdl_ll_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	mdl_ll_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void mdl_ll_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mdl_llpop_buffer_state();
	 *		mdl_llpush_buffer_state(new_buffer);
     */
	mdl_llensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	mdl_ll_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (mdl_llwrap()) processing, but the only time this flag
	 * is looked at is after mdl_llwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void mdl_ll_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE mdl_ll_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mdl_llalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mdl_ll_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mdl_llalloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in mdl_ll_create_buffer()" );

	b->yy_is_our_buffer = 1;

	mdl_ll_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with mdl_ll_create_buffer()
 * @param yyscanner The scanner object.
 */
    void mdl_ll_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mdl_llfree((void *) b->yy_ch_buf ,yyscanner );

	mdl_llfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mdl_llrestart() or at EOF.
 */
    static void mdl_ll_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	mdl_ll_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then mdl_ll_init_buffer was _probably_
     * called from mdl_llrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void mdl_ll_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		mdl_ll_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void mdl_llpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	mdl_llensure_buffer_stack(yyscanner);

	/* This block is copied from mdl_ll_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from mdl_ll_switch_to_buffer. */
	mdl_ll_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void mdl_llpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	mdl_ll_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		mdl_ll_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mdl_llensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mdl_llalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mdl_llensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mdl_llrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mdl_llensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE mdl_ll_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) mdl_llalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mdl_ll_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	mdl_ll_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to mdl_lllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       mdl_ll_scan_bytes() instead.
 */
YY_BUFFER_STATE mdl_ll_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return mdl_ll_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to mdl_lllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE mdl_ll_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) mdl_llalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in mdl_ll_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = mdl_ll_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in mdl_ll_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE mdl_llget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int mdl_llget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int mdl_llget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *mdl_llget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *mdl_llget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int mdl_llget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *mdl_llget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void mdl_llset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void mdl_llset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mdl_llset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void mdl_llset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mdl_llset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see mdl_ll_switch_to_buffer
 */
void mdl_llset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void mdl_llset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int mdl_llget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void mdl_llset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* mdl_lllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int mdl_lllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) mdl_llalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* mdl_lllex_init_extra has the same functionality as mdl_lllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to mdl_llalloc in
 * the yyextra field.
 */

int mdl_lllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    mdl_llset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) mdl_llalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    mdl_llset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from mdl_lllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * mdl_lllex_init()
     */
    return 0;
}

/* mdl_lllex_destroy is for both reentrant and non-reentrant scanners. */
int mdl_lllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		mdl_ll_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mdl_llpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	mdl_llfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        mdl_llfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * mdl_lllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    mdl_llfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

#define YYTABLES_NAME "yytables"

#line 122 "mdl/MDLScanner.l"


